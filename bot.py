import os
import io
import re
import unicodedata
from typing import Optional, Dict, List, Set
from dotenv import load_dotenv

from telebot import TeleBot, types
from openai import OpenAI  # –∑–∞–ª–∏—à–∏–≤, —è–∫—â–æ –¥–µ—Å—å —É –ø—Ä–æ—î–∫—Ç—ñ —â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ
import pandas as pd
from openpyxl.utils import get_column_letter

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# admins by username (from .env: ADMIN_USERNAMES=nick1,nick2)
ADMIN_USERNAMES = {
    u.strip().lstrip("@")
    for u in (os.getenv("ADMIN_USERNAMES") or "").split(",")
    if u.strip()
}

# allowed user ids ‚Äî —Ç—ñ–ª—å–∫–∏ –∑ .env
# .env: ALLOWED_USER_IDS=155840708,123456789
_raw_allowed = os.getenv("ALLOWED_USER_IDS", "")
ALLOWED_USER_IDS: Set[int] = set()
for part in _raw_allowed.split(","):
    part = part.strip()
    if not part:
        continue
    try:
        ALLOWED_USER_IDS.add(int(part))
    except ValueError:
        # —è–∫—â–æ —Ä–∞–ø—Ç–æ–º —Ç–∞–º —â–æ—Å—å –Ω–µ —á–∏—Å–ª–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
        pass

bot = TeleBot(BOT_TOKEN, parse_mode="HTML")
client = OpenAI(api_key=OPENAI_API_KEY)


# ===================== NORMALIZATION (countries) =====================
def normalize_text(s: str) -> str:
    return re.sub(r"\s+", " ", str(s)).strip().lower()


def build_country_map_uk_to_en() -> Dict[str, str]:
    m = {
        "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞": "Argentina",
        "–ë–µ–Ω—ñ–Ω": "Benin",
        "–ë—É—Ä–∫—ñ–Ω–∞-–§–∞—Å–æ": "Burkina Faso",
        "–í–µ–Ω–µ—Å—É–µ–ª–∞": "Venezuela",
        "–ì–∞–±–æ–Ω": "Gabon",
        "–ì–∞—ó—Ç—ñ": "Haiti",
        "–ì–∞–Ω–∞": "Ghana",

        # ‚ùó —É—Ç–æ—á–Ω–µ–Ω–Ω—è: —É XLSX –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è "Guinea-Conakry"
        # —â–æ–± –∑–≤‚Äô—è–∑–∞—Ç–∏ –∑ –¥–æ–¥. —Ç–∞–±–ª–∏—Ü—è–º–∏, –º–∞–ø–∏–º–æ —É–∫—Ä "–ì–≤—ñ–Ω–µ—è" —Å–∞–º–µ –Ω–∞ "Guinea-Conakry"
        # (–¥–∞–ª—ñ –≤ –∫–∞–Ω–æ–Ω—ñ –∑–≤–µ–¥–µ–º–æ —Ü–µ –¥–æ "Guinea")
        "–ì–≤—ñ–Ω–µ—è": "Guinea-Conakry",

        # ---- DRC/ROC ----
        "–î–µ–º–æ–∫—Ä–∞—Ç–∏—á–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö–æ–Ω“ë–æ": "Congo (Kinshasa)",
        "–î–† –ö–æ–Ω–≥–æ": "Congo (Kinshasa)",
        "–ö–æ–Ω–≥–æ (–ö—ñ–Ω—à–∞—Å–∞)": "Congo (Kinshasa)",
        "–†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö–æ–Ω–≥–æ": "Congo (Brazzaville)",
        "–ö–æ–Ω–≥–æ-–ë—Ä–∞–∑–∑–∞–≤—ñ–ª—å": "Congo (Brazzaville)",
        # —è–∫—â–æ –ø—Ä–æ—Å—Ç–æ "–ö–æ–Ω–≥–æ" ‚Äî –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º DRC
        "–ö–æ–Ω–≥–æ": "Congo (Brazzaville)",

        "–ö–∞–º–µ—Ä—É–Ω": "Cameroon",

        # –ö–æ—Ç-–¥‚Äô–Ü–≤—É–∞—Ä ‚Äî –æ–¥—Ä–∞–∑—É –∫—ñ–ª—å–∫–∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
        "–ö–æ—Ç-–¥'–Ü–≤—É–∞—Ä": "Cote d'Ivoire",
        "–ö–æ—Ç-–¥‚Äô–Ü–≤—É–∞—Ä": "Cote d'Ivoire",
        "–ö–æ—Ç –¥‚Äô–Ü–≤—É–∞—Ä": "Cote d'Ivoire",

        "–ö–µ–Ω—ñ—è": "Kenya",
        "–°–µ–Ω–µ–≥–∞–ª": "Senegal",
        "–°—å—î—Ä—Ä–∞-–õ–µ–æ–Ω–µ": "Sierra Leone",
        "–¢–∞–Ω–∑–∞–Ω—ñ—è": "Tanzania",
        "–¢–æ–≥–æ": "Togo",
        "–£–≥–∞–Ω–¥–∞": "Uganda",
        "–ó–∞–º–±—ñ—è": "Zambia",
        "–ï—Ñ—ñ–æ–ø—ñ—è": "Ethiopia",
        "–ù—ñ–≥–µ—Ä": "Niger",
        "–ù—ñ–≥–µ—Ä—ñ—è": "Nigeria",
        "–ú–∞–ª—ñ": "Mali",
        "–ü–∞–∫–∏—Å—Ç–∞–Ω": "Pakistan",
        "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "Kazakhstan",
        "–Ü—Å–ø–∞–Ω—ñ—è": "Spain",
        "–§—Ä–∞–Ω—Ü—ñ—è": "France",
        "–Ü—Ç–∞–ª—ñ—è": "Italy",
        "–ü–æ—Ä—Ç—É–≥–∞–ª—ñ—è": "Portugal",
        "–î–æ–º—ñ–Ω—ñ–∫–∞–Ω—Å—å–∫–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞": "Dominican Republic",
        "–ö–∞–Ω–∞–¥–∞": "Canada",
        "–§—ñ–ª—ñ–ø–ø—ñ–Ω–∏": "Philippines",

        # üîπ –¥–æ–¥–∞–Ω–æ –∑ –≤–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É ¬´missing¬ª
        "–ë–æ–ª—ñ–≤—ñ—è": "Bolivia",
        "–ï–∫–≤–∞–¥–æ—Ä": "Ecuador",
        "–ö–æ–ª—É–º–±—ñ—è": "Colombia",
        "–ü–∞—Ä–∞–≥–≤–∞–π": "Paraguay",
        "–ü–µ—Ä—É": "Peru",
    }
    return {normalize_text(k): v for k, v in m.items()}


def build_country_map_ru_to_en() -> Dict[str, str]:
    m = {
        "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞": "Argentina",
        "–ë–µ–Ω–∏–Ω": "Benin",
        "–ë—É—Ä–∫–∏–Ω–∞-–§–∞—Å–æ": "Burkina Faso",
        "–í–µ–Ω–µ—Å—É—ç–ª–∞": "Venezuela",
        "–ì–∞–±–æ–Ω": "Gabon",
        "–ì–∞–∏—Ç–∏": "Haiti",
        "–ì–∞–Ω–∞": "Ghana",

        # –ö–∞–∫ –∏ –≤ UA-–∫–∞—Ä—Ç–µ: "–ì–≤–∏–Ω–µ—è" ‚Üí "Guinea-Conakry" (–¥–∞–ª–µ–µ –∫–∞–Ω–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤ "Guinea")
        "–ì–≤–∏–Ω–µ—è": "Guinea-Conakry",

        # ---- DRC/ROC ----
        "–î–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–Ω–≥–æ": "Congo (Kinshasa)",
        "–î–† –ö–æ–Ω–≥–æ": "Congo (Kinshasa)",
        "–ö–æ–Ω–≥–æ (–ö–∏–Ω—à–∞—Å–∞)": "Congo (Kinshasa)",
        "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–Ω–≥–æ": "Congo (Brazzaville)",
        "–ö–æ–Ω–≥–æ-–ë—Ä–∞–∑–∑–∞–≤–∏–ª—å": "Congo (Brazzaville)",
        # –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ "–ö–æ–Ω–≥–æ" ‚Äî –∫–∞–∫ –≤ UA-–∫–∞—Ä—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Brazzaville
        "–ö–æ–Ω–≥–æ": "Congo (Brazzaville)",

        "–ö–∞–º–µ—Ä—É–Ω": "Cameroon",

        # –ö–æ—Ç-–¥‚Äô–ò–≤—É–∞—Ä ‚Äî —Ä–∞–∑–Ω—ã–µ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã/–ø—Ä–æ–±–µ–ª—ã
        "–ö–æ—Ç-–¥'–ò–≤—É–∞—Ä": "Cote d'Ivoire",
        "–ö–æ—Ç-–¥‚Äô–ò–≤—É–∞—Ä": "Cote d'Ivoire",
        "–ö–æ—Ç –¥‚Äô–ò–≤—É–∞—Ä": "Cote d'Ivoire",

        "–ö–µ–Ω–∏—è": "Kenya",
        "–°–µ–Ω–µ–≥–∞–ª": "Senegal",
        "–°—å–µ—Ä—Ä–∞-–õ–µ–æ–Ω–µ": "Sierra Leone",
        "–¢–∞–Ω–∑–∞–Ω–∏—è": "Tanzania",
        "–¢–æ–≥–æ": "Togo",
        "–£–≥–∞–Ω–¥–∞": "Uganda",
        "–ó–∞–º–±–∏—è": "Zambia",
        "–≠—Ñ–∏–æ–ø–∏—è": "Ethiopia",
        "–ù–∏–≥–µ—Ä": "Niger",
        "–ù–∏–≥–µ—Ä–∏—è": "Nigeria",
        "–ú–∞–ª–∏": "Mali",
        "–ü–∞–∫–∏—Å—Ç–∞–Ω": "Pakistan",
        "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "Kazakhstan",
        "–ò—Å–ø–∞–Ω–∏—è": "Spain",
        "–§—Ä–∞–Ω—Ü–∏—è": "France",
        "–ò—Ç–∞–ª–∏—è": "Italy",
        "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è": "Portugal",
        "–î–æ–º–∏–Ω–∏–∫–∞–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞": "Dominican Republic",
        "–ö–∞–Ω–∞–¥–∞": "Canada",
        "–§–∏–ª–∏–ø–ø–∏–Ω—ã": "Philippines",

        # –õ–∞—Ç–∞–º (–∫–∞–∫ –≤ UA-–∫–∞—Ä—Ç–µ)
        "–ë–æ–ª–∏–≤–∏—è": "Bolivia",
        "–≠–∫–≤–∞–¥–æ—Ä": "Ecuador",
        "–ö–æ–ª—É–º–±–∏—è": "Colombia",
        "–ü–∞—Ä–∞–≥–≤–∞–π": "Paraguay",
        "–ü–µ—Ä—É": "Peru",
    }
    return {normalize_text(k): v for k, v in m.items()}


def build_country_canonical() -> Dict[str, str]:
    canon = {
        # —Å–∞–º–æ–∫–∞–Ω–æ–Ω—ñ—á–Ω—ñ EN
        "Argentina": "Argentina",
        "Benin": "Benin",
        "Burkina Faso": "Burkina Faso",
        "Gabon": "Gabon",
        "Haiti": "Haiti",
        "Ghana": "Ghana",
        "Guinea": "Guinea",
        "Congo (Kinshasa)": "Congo (Kinshasa)",
        "Congo (Brazzaville)": "Congo (Brazzaville)",
        "Cameroon": "Cameroon",
        "Cote d'Ivoire": "Cote d'Ivoire",
        "Kenya": "Kenya",
        "Senegal": "Senegal",
        "Sierra Leone": "Sierra Leone",
        "Tanzania": "Tanzania",
        "Togo": "Togo",
        "Uganda": "Uganda",
        "Venezuela": "Venezuela",
        "Zambia": "Zambia",
        "Ethiopia": "Ethiopia",
        "Niger": "Niger",
        "Nigeria": "Nigeria",
        "Mali": "Mali",
        "Pakistan": "Pakistan",
        "Kazakhstan": "Kazakhstan",
        "Spain": "Spain",
        "France": "France",
        "Italy": "Italy",
        "Portugal": "Portugal",
        "Dominican Republic": "Dominican Republic",
        "Canada": "Canada",
        "Philippines": "Philippines",

        # üîπ –¥–æ–¥–∞–Ω–æ –∑ –≤–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É ¬´missing¬ª
        "Bolivia": "Bolivia",
        "Ecuador": "Ecuador",
        "Colombia": "Colombia",
        "Paraguay": "Paraguay",
        "Peru": "Peru",

        # —Å–∏–Ω–æ–Ω—ñ–º–∏/–≤–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è ‚Üí –∫–∞–Ω–æ–Ω
        # Cote d'Ivoire
        "Cote DIvoire": "Cote d'Ivoire",
        "Cote dIvoire": "Cote d'Ivoire",
        "Cote D Ivoire": "Cote d'Ivoire",
        "Cote d‚Äôivoire": "Cote d'Ivoire",
        "C√¥te d‚ÄôIvoire": "Cote d'Ivoire",
        "Ivory Coast": "Cote d'Ivoire",

        # Guinea-Conakry ‚Üí Guinea
        "Guinea-Conakry": "Guinea",
        "Guinea Conakry": "Guinea",
        "Guinea, Conakry": "Guinea",

        # DRC/ROC –≤–∞—Ä—ñ–∞–Ω—Ç–∏
        "DRC": "Congo (Kinshasa)",
        "DR Congo": "Congo (Kinshasa)",
        "Congo (DRC)": "Congo (Kinshasa)",
        "Democratic Republic of the Congo": "Congo (Kinshasa)",
        "Democratic Republic of Congo": "Congo (Kinshasa)",
        "Congo-Kinshasa": "Congo (Kinshasa)",

        "Republic of the Congo": "Congo (Brazzaville)",
        "Congo Republic": "Congo (Brazzaville)",
        "Congo-Brazzaville": "Congo (Brazzaville)",

        # UA ‚Üí EN –∫–∞–Ω–æ–Ω (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –¥–µ—Å—å –ø—Ä–æ—Å–æ—á–∏—Ç—å—Å—è —É–∫—Ä —É –¥–æ–¥. —Ç–∞–±–ª–∏—Ü—è—Ö)
        "–∫–æ—Ç-–¥'—ñ–≤—É–∞—Ä": "Cote d'Ivoire",
        "–∫–æ—Ç-–¥‚Äô—ñ–≤—É–∞—Ä": "Cote d'Ivoire",
        "–∫–æ—Ç –¥‚Äô—ñ–≤—É–∞—Ä": "Cote d'Ivoire",
        "–≥–≤—ñ–Ω–µ—è": "Guinea",
        "–±–æ–ª—ñ–≤—ñ—è": "Bolivia",
        "–µ–∫–≤–∞–¥–æ—Ä": "Ecuador",
        "–∫–æ–ª—É–º–±—ñ—è": "Colombia",
        "–ø–∞—Ä–∞–≥–≤–∞–π": "Paraguay",
        "–ø–µ—Ä—É": "Peru",
    }
    return {normalize_text(k): v for k, v in canon.items()}


def to_canonical_en(
        country: str,
        uk_to_en: Dict[str, str],
        canonical: Dict[str, str],
        ru_to_en: Optional[Dict[str, str]] = None,
) -> str:
    key = normalize_text(country)

    # 1) UA ‚Üí EN
    if key in uk_to_en:
        mapped = uk_to_en[key]
        return canonical.get(normalize_text(mapped), mapped)

    # 2) RU ‚Üí EN (—Ä–µ–∑–µ—Ä–≤, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤ UA)
    if ru_to_en and key in ru_to_en:
        mapped = ru_to_en[key]
        return canonical.get(normalize_text(mapped), mapped)

    # 3) –£–∂–µ EN/–≤–∞—Ä—ñ–∞–Ω—Ç ‚Äî –∫–∞–Ω–æ–Ω—ñ–∑—É—î–º–æ
    if key in canonical:
        return canonical[key]

    # 4) –°–ø–µ—Ü–≤–∏–ø–∞–¥–∫–∏
    if key in {"–∫–æ–Ω–≥–æ", "congo"}:
        return "Congo (Kinshasa)"

    # 5) –Ø–∫ —î (–Ω–µ –≤–ø—ñ–∑–Ω–∞–ª–∏)
    return country


# ---- –∫—Ä–∞—ó–Ω–∏ (–¥–ª—è unite_geo) ----
COUNTRY_EQUIV_UK_EN = {
    "–≥–∞–Ω–∞": "Ghana", "–µ—Ñ—ñ–æ–ø—ñ—è": "Ethiopia", "–∫–µ–Ω—ñ—è": "Kenya", "–∫–æ–ª—É–º–±—ñ—è": "Colombia",
    "–∫–æ—Ç-–¥‚Äô—ñ–≤—É–∞—Ä": "C√¥te d'Ivoire", "–∫–æ—Ç-–¥'—ñ–≤—É–∞—Ä": "C√¥te d'Ivoire", "–∫–æ—Ç –¥‚Äô—ñ–≤—É–∞—Ä": "C√¥te d'Ivoire",
    "–∫–æ—Ç –¥'—ñ–≤—É–∞—Ä": "C√¥te d'Ivoire",
    "–ø–∞—Ä–∞–≥–≤–∞–π": "Paraguay", "—Ç–∞–Ω–∑–∞–Ω—ñ—è": "Tanzania", "–∫–æ–Ω–≥–æ": "Congo",
    "–¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–Ω–∞ —Ä–µ—Å–ø—É–±–ª—ñ–∫–∞ –∫–æ–Ω–≥–æ": "Democratic Republic of the Congo",
    "—Ä–µ—Å–ø—É–±–ª—ñ–∫–∞ –∫–æ–Ω–≥–æ": "Congo", "–≤–µ–Ω–µ—Å—É–µ–ª–∞": "Venezuela", "–≥—Ä–µ—Ü—ñ—è": "Greece", "—ñ—Å–ø–∞–Ω—ñ—è": "Spain", "—ñ—Ç–∞–ª—ñ—è": "Italy",
    "–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω": "Kazakhstan", "–∫–∞–Ω–∞–¥–∞": "Canada", "–º–∞–ª–∞–π–∑—ñ—è": "Malaysia", "–º–∞–ª—ñ": "Mali", "–ø–æ—Ä—Ç—É–≥–∞–ª—ñ—è": "Portugal",
    "—Å–µ–Ω–µ–≥–∞–ª": "Senegal", "—Ç–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω": "Tajikistan", "—Ç–∞—ó–ª–∞–Ω–¥": "Thailand", "—Ç—É—Ä–µ—á—á–∏–Ω–∞": "Turkey",
    "—É–∑–±–µ–∫–∏—Å—Ç–∞–Ω": "Uzbekistan",
    "—Ñ—Ä–∞–Ω—Ü—ñ—è": "France", "—à—Ä—ñ-–ª–∞–Ω–∫–∞": "Sri Lanka", "–≤'—î—Ç–Ω–∞–º": "Vietnam",
}
COUNTRY_EQUIV_RU_EN = {
    "–≥–∞–Ω–∞": "Ghana", "—ç—Ñ–∏–æ–ø–∏—è": "Ethiopia", "–∫–µ–Ω–∏—è": "Kenya", "–∫–æ–ª—É–º–±–∏—è": "Colombia",
    "–∫–æ—Ç-–¥'–∏–≤—É–∞—Ä": "C√¥te d'Ivoire", "–∫–æ—Ç –¥'–∏–≤—É–∞—Ä": "C√¥te d'Ivoire", "–∫–æ—Ç-–¥‚Äô–∏–≤—É–∞—Ä": "C√¥te d'Ivoire",
    "–ø–∞—Ä–∞–≥–≤–∞–π": "Paraguay", "—Ç–∞–Ω–∑–∞–Ω–∏—è": "Tanzania", "–∫–æ–Ω–≥–æ": "Congo",
    "–¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞ –∫–æ–Ω–≥–æ": "Democratic Republic of the Congo",
    "—Ä–µ—Å–ø—É–±–ª–∏–∫–∞ –∫–æ–Ω–≥–æ": "Congo", "–≤–µ–Ω–µ—Å—É—ç–ª–∞": "Venezuela", "–≥—Ä–µ—Ü–∏—è": "Greece", "–∏—Å–ø–∞–Ω–∏—è": "Spain", "–∏—Ç–∞–ª–∏—è": "Italy",
    "–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω": "Kazakhstan", "–∫–∞–Ω–∞–¥–∞": "Canada", "–º–∞–ª–∞–π–∑–∏—è": "Malaysia", "–º–∞–ª–∏": "Mali", "–ø–æ—Ä—Ç—É–≥–∞–ª–∏—è": "Portugal",
    "—Å–µ–Ω–µ–≥–∞–ª": "Senegal", "—Ç–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω": "Tajikistan", "—Ç–∞–∏–ª–∞–Ω–¥": "Thailand", "—Ç—É—Ä—Ü–∏—è": "Turkey",
    "—É–∑–±–µ–∫–∏—Å—Ç–∞–Ω": "Uzbekistan",
    "—Ñ—Ä–∞–Ω—Ü–∏—è": "France", "—à—Ä–∏-–ª–∞–Ω–∫–∞": "Sri Lanka", "–≤—å–µ—Ç–Ω–∞–º": "Vietnam",
}
COUNTRY_CANON = {
    "ghana": "Ghana", "ethiopia": "Ethiopia", "kenya": "Kenya", "colombia": "Colombia",
    "cote d'ivoire": "C√¥te d'Ivoire", "c√¥te d'ivoire": "C√¥te d'Ivoire", "paraguay": "Paraguay", "tanzania": "Tanzania",
    "democratic republic of the congo": "Democratic Republic of the Congo", "republic of the congo": "Congo",
    "congo": "Congo",
    "venezuela": "Venezuela", "greece": "Greece", "spain": "Spain", "italy": "Italy", "kazakhstan": "Kazakhstan",
    "canada": "Canada", "malaysia": "Malaysia", "mali": "Mali", "portugal": "Portugal", "senegal": "Senegal",
    "tajikistan": "Tajikistan", "thailand": "Thailand", "turkey": "Turkey", "uzbekistan": "Uzbekistan",
    "france": "France", "sri lanka": "Sri Lanka", "viet nam": "Vietnam", "vietnam": "Vietnam",
}


def build_country_map_uk_to_en(): return COUNTRY_EQUIV_UK_EN.copy()


def build_country_map_ru_to_en(): return COUNTRY_EQUIV_RU_EN.copy()


def build_country_canonical():    return COUNTRY_CANON.copy()


def _normalize_whitespace(s: str) -> str:
    return re.sub(r"\s+", " ", s or "").strip()


def normalize_text(s: str) -> str:
    if not s: return ""
    s = s.lower().strip()
    s = unicodedata.normalize("NFKD", s)
    s = re.sub(r"[^a-z–∞-—è—ñ—ó—î“ë0-9\s\-'‚Äô]", "", s, flags=re.IGNORECASE)
    s = re.sub(r"\s+", " ", s).strip()
    return s


def is_user_allowed(user_id: int, username: Optional[str]) -> bool:
    # 1) —è–≤–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ ID –∑ .env
    if user_id in ALLOWED_USER_IDS:
        return True
    # 2) –∞–¥–º—ñ–Ω–∏ –ø–æ username
    if username and username in ADMIN_USERNAMES:
        return True
    return False


def _deny_access_message():
    return "‚õî <b>–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.</b>\n–Ø–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–æ—Å—Ç—É–ø ‚Äî –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞."


def require_access(func):
    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        username = (message.from_user.username or "")
        if not is_user_allowed(user_id, username):
            bot.reply_to(message, _deny_access_message())
            return
        return func(message, *args, **kwargs)

    return wrapper


def require_access_cb(func):
    def wrapper(call, *args, **kwargs):
        user_id = call.from_user.id
        username = (call.from_user.username or "")
        if not is_user_allowed(user_id, username):
            bot.answer_callback_query(call.id, _deny_access_message(), show_alert=True)
            return
        return func(call, *args, **kwargs)

    return wrapper


class UserState:
    def __init__(self):
        # –ø–æ–∫—Ä–æ–∫–æ–≤–∏–π —Ñ–ª–æ—É –ø—ñ–¥ /start
        self.phase: str = "IDLE"  # IDLE -> WAIT_CURRENT -> WAIT_SUBID -> WAIT_ADDITIONAL -> DONE
        self.flow_active: bool = False

        self.main_agg_df: Optional[pd.DataFrame] = None
        self.offers: List[str] = []
        self.current_offer_index: int = 0
        self.offer_deposits: Dict[str, Dict[str, Dict[str, float]]] = {}

        # SubID —Ñ—ñ–ª—å—Ç—Ä: None -> –≤—Å—ñ, set() -> –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –≤—Å—ñ (—Ç–µ—Ö–Ω—ñ—á–Ω–æ None),
        # –Ω–µ–ø–æ—Ä–æ–∂–Ω—è –º–Ω–æ–∂–∏–Ω–∞ -> —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ –º–Ω–æ–∂–∏–Ω—ñ
        self.subid_filters: Optional[Set[str]] = None

        # unite_geo
        self.country_map_uk_to_en = build_country_map_uk_to_en()
        self.country_map_ru_to_en = build_country_map_ru_to_en()
        self.country_canon = build_country_canonical()

        self.unite_country_col = "–ì–ï–û"
        self.unite_spend_col = "Total spend"

    def reset_for_flow(self):
        self.phase = "WAIT_CURRENT"
        self.flow_active = True
        self.main_agg_df = None
        self.offers = []
        self.current_offer_index = 0
        self.offer_deposits = {}
        self.subid_filters = None

    def finish_flow(self):
        self.phase = "IDLE"
        self.flow_active = False


user_states: Dict[int, UserState] = {}


# ---------- –ö–æ–º–∞–Ω–¥–∏ ----------

@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    if not is_user_allowed(message.from_user.id, message.from_user.username or ""):
        bot.reply_to(message, _deny_access_message())
        return

    st = user_states.setdefault(message.chat.id, UserState())
    st.reset_for_flow()
    bot.reply_to(
        message,
        "üëã –°—Ç–∞—Ä—Ç—É—î–º–æ –ø–æ–∫—Ä–æ–∫–æ–≤–æ:\n"
        "1) –ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>–æ—Å–Ω–æ–≤–Ω—É</b> —Ç–∞–±–ª–∏—Ü—é (.xlsx/.xls/.csv) –∑ –∫–æ–ª–æ–Ω–∫–∞–º–∏: –æ—Ñ–µ—Ä, –≥–µ–æ, —Å—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤."
    )


@bot.message_handler(commands=["unite_geo"])
@require_access
def cmd_unite_geo(message: types.Message):
    st = user_states.setdefault(message.chat.id, UserState())
    st.phase = "WAIT_UNITE_TABLE"
    bot.reply_to(
        message,
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–∞–±–ª–∏—Ü—é (.xlsx/.xls/.csv), –¥–µ —Ç—Ä–µ–±–∞ —É–Ω—ñ—Ñ—ñ–∫—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ –∫—Ä–∞—ó–Ω (UA/RU ‚Üí EN ‚Üí –∫–∞–Ω–æ–Ω)."
    )


@bot.message_handler(commands=["help"])
@require_access
def cmd_help(message: types.Message):
    bot.reply_to(
        message,
        "<b>–î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó:</b>\n"
        "‚Ä¢ <b>/start</b> ‚Äî –ø–æ–∫—Ä–æ–∫–æ–≤–æ: –æ—Å–Ω–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è ‚Üí SubID (–∞–±–æ –≤—Å—ñ) ‚Üí –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
        "‚Ä¢ <b>/unite_geo</b> ‚Äî —É–Ω—ñ—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–∞–∑–≤ –∫—Ä–∞—ó–Ω —É –±—É–¥—å-—è–∫—ñ–π —Ç–∞–±–ª–∏—Ü—ñ."
    )


# ---------- –£—Ç–∏–ª—ñ—Ç–∏ —á–∏—Ç–∞–Ω–Ω—è ----------
def _looks_like_header(cols: list[str]) -> bool:
    wanted = {"–≥–µ–æ", "geo", "country", "–∫—Ä–∞—ó–Ω–∞", "—Å—Ç—Ä–∞–Ω–∞"}
    normed = {str(c).strip().lower() for c in cols}
    return bool(normed & wanted)


def _read_excel_auto_header(bio: io.BytesIO) -> pd.DataFrame:
    """
    –®—É–∫–∞—î–º–æ —Ä—è–¥–æ–∫ —ñ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≤ –ø–µ—Ä—à–∏—Ö 15 —Ä—è–¥–∫–∞—Ö.
    –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –∑–≤—ñ—Ç—ñ–≤, –¥–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ 8-–≥–æ —Ä—è–¥–∫–∞ —ñ –Ω–∏–∂—á–µ.
    """
    for header_row in range(15):  # üëà –±—É–ª–æ 5, —Å—Ç–∞–ª–æ 15
        bio.seek(0)
        df_try = pd.read_excel(bio, header=header_row)
        if _looks_like_header(list(df_try.columns)):
            return df_try

    # —è–∫—â–æ —Ç–∞–∫ —ñ –Ω–µ –∑–Ω–∞–π—à–ª–∏ ‚Äî –±–µ—Ä–µ–º–æ —è–∫ —î
    bio.seek(0)
    return pd.read_excel(bio)


def _read_csv_auto_header(bio: io.BytesIO) -> pd.DataFrame:
    for header_row in range(15):  # üëà —Ç–µ–∂ –¥–æ 15
        bio.seek(0)
        df_try = pd.read_csv(bio, header=header_row)
        if _looks_like_header(list(df_try.columns)):
            return df_try
    bio.seek(0)
    return pd.read_csv(bio)


def _ensure_series(df: pd.DataFrame, col: str) -> Optional[pd.Series]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î Series –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –Ω–∞–∑–≤–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥—É–±–ª—é–≤–∞–ª–∞—Å—å —ñ df[col] ‚Äî DataFrame."""
    if col not in df.columns:
        return None
    obj = df[col]
    if isinstance(obj, pd.DataFrame):
        # –≤–∑—è—Ç–∏ –ø–µ—Ä—à–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å –∑ —Ç–∞–∫–∏–º —ñ–º‚Äô—è–º
        return obj.iloc[:, 0]
    return obj


def extract_month_series(df: pd.DataFrame) -> pd.Series:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î Series –∑ –º—ñ—Å—è—Ü—è–º–∏ (1..12), –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏, —É —Ç–∞–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É:
    1) –≥–æ—Ç–æ–≤—É –∫–æ–ª–æ–Ω–∫—É '–ú—ñ—Å—è—Ü—å', —è–∫—â–æ —î;
    2) –¥–∞—Ç—É –≤ '–î–∞—Ç–∞';
    3) –¥–∞—Ç—É –≤ '–î–∞—Ç–∞_2' (—á–∞—Å—Ç–æ —Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy).
    """
    # 1) '–ú—ñ—Å—è—Ü—å'
    s = _ensure_series(df, "–ú—ñ—Å—è—Ü—å")
    if s is not None:
        # —á–∞—Å—Ç–æ —Ü–µ float —Ç–∏–ø—É 7.0 ‚Üí 7
        return pd.to_numeric(s, errors="coerce").round().astype("Int64")

    # 2) '–î–∞—Ç–∞' (—á–∞—Å—Ç–æ dd/mm/yyyy)
    s = _ensure_series(df, "–î–∞—Ç–∞")
    if s is not None:
        dt = pd.to_datetime(s, errors="coerce", dayfirst=True)
        if dt.notna().any():
            return dt.dt.month.astype("Int64")

    # 3) '–î–∞—Ç–∞_2' (—á–∞—Å—Ç–æ dd.mm.yyyy)
    s = _ensure_series(df, "–î–∞—Ç–∞_2")
    if s is not None:
        dt = pd.to_datetime(s, errors="coerce", dayfirst=True)
        if dt.notna().any():
            return dt.dt.month.astype("Int64")

    # —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–π—à–ª–æ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å–µ NaN
    return pd.Series([pd.NA] * len(df), index=df.index, dtype="Int64")


def filter_main_by_month(df: pd.DataFrame, month_num: int) -> pd.DataFrame:
    m = extract_month_series(df)
    keep = (m == int(month_num))
    out = df.loc[keep.fillna(False)].copy()
    return out


def read_main_table(file_bytes: bytes, filename: str) -> pd.DataFrame:
    bio = io.BytesIO(file_bytes)
    fname = (filename or "").lower()

    if fname.endswith((".xlsx", ".xls", ".xlsm")):
        df = _read_excel_auto_header(bio)
    elif fname.endswith(".csv"):
        df = _read_csv_auto_header(bio)
    else:
        raise ValueError("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ .xlsx/.xls/.xlsm/.csv")

    print("=== MAIN RAW COLUMNS ===")
    print(list(df.columns))
    print("=== MAIN RAW HEAD ===")
    try:
        print(df.head(10))
    except Exception:
        pass

    possible_geo    = ["–ì–ï–û", "–ì–µ–æ", "geo", "Geo", "Country", "–ö—Ä–∞—ó–Ω–∞", "–°—Ç—Ä–∞–Ω–∞"]
    possible_offer  = ["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É", "–û—Ñ–µ—Ä", "Offer", "–û—Ñ—Ñ–µ—Ä", "–û—Ñ–µ—Ä—Ä", "–ù–∞–∑–≤–∞ –æ—Ñ–µ—Ä—É"]
    possible_spend  = ["Total spend", "Total Spend", "–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏", "–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ ", "–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏, $"]
    partner_cols    = ["–ü–∞—Ä—Ç–Ω–µ—Ä", "–ü–∞—Ä—Ç–Ω–µ—Ä ", "Partner"]
    possible_date   = ["–î–∞—Ç–∞", "–¥–∞—Ç–∞", "Date", "date"]
    possible_month  = ["–ú—ñ—Å—è—Ü—å", "–ú–µ—Å—è—Ü", "month", "Month"]

    if not any(col in df.columns for col in possible_geo):
        raise ValueError(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–∫—É –∑ –≥–µ–æ (–ì–ï–û/–ì–µ–æ/Country/–ö—Ä–∞—ó–Ω–∞/–°—Ç—Ä–∞–Ω–∞). –ó–Ω–∞–π—à–æ–≤: {list(df.columns)}")
    if not any(col in df.columns for col in possible_offer):
        raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–∫—É –∑ –Ω–∞–∑–≤–æ—é –æ—Ñ–µ—Ä—É")

    # --- –∞–∫—É—Ä–∞—Ç–Ω–µ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è, —â–æ–± –Ω–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–≤–∞ '–î–∞—Ç–∞'
    rename_map = {}
    date_hits = []  # –∑–±–µ—Ä–µ–º–æ –≤—Å—ñ –∫–æ–ª–æ–Ω–∫–∏, —Å—Ö–æ–∂—ñ –Ω–∞ –¥–∞—Ç—É
    for c in df.columns:
        c_norm = str(c).strip()
        if c_norm in possible_geo:
            rename_map[c] = "–ì–ï–û"
        elif c_norm in possible_offer:
            rename_map[c] = "–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"
        elif c_norm in possible_spend:
            rename_map[c] = "Total spend"
        elif c_norm in partner_cols:
            rename_map[c] = "–ü–∞—Ä—Ç–Ω–µ—Ä"
        elif c_norm in possible_date:
            date_hits.append(c)
        elif c_norm in possible_month:
            rename_map[c] = "–ú—ñ—Å—è—Ü—å"

    # –ø–µ—Ä—à—É –¥–∞—Ç—É –Ω–∞–∑–≤–µ–º–æ "–î–∞—Ç–∞", –¥—Ä—É–≥—É ‚Äî "–î–∞—Ç–∞_2"
    if date_hits:
        rename_map[date_hits[0]] = "–î–∞—Ç–∞"
        if len(date_hits) > 1:
            rename_map[date_hits[1]] = "–î–∞—Ç–∞_2"

    df = df.rename(columns=rename_map)

    # —É—Å—É–Ω—É—Ç–∏ —Ç–æ—á–Ω—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –Ω–∞–∑–≤ –∫–æ–ª–æ–Ω–æ–∫ (–∑–∞–ª–∏—à–∞—î–º–æ –ø–µ—Ä—à–µ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è)
    df = df.loc[:, ~df.columns.duplicated()]

    # —Ñ–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫, —è–∫—ñ —Ö–æ—á–µ–º–æ –∑–±–µ—Ä–µ–≥—Ç–∏
    keep_cols = ["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É", "–ì–ï–û"]
    if "Total spend" in df.columns: keep_cols.append("Total spend")
    if "–ü–∞—Ä—Ç–Ω–µ—Ä" in df.columns:     keep_cols.append("–ü–∞—Ä—Ç–Ω–µ—Ä")
    if "–î–∞—Ç–∞" in df.columns:         keep_cols.append("–î–∞—Ç–∞")
    if "–î–∞—Ç–∞_2" in df.columns:       keep_cols.append("–î–∞—Ç–∞_2")
    if "–ú—ñ—Å—è—Ü—å" in df.columns:       keep_cols.append("–ú—ñ—Å—è—Ü—å")

    df = df[keep_cols]

    print("=== MAIN AFTER RENAME/KEEP ===")
    print(list(df.columns))
    try:
        print(df.head(10))
    except Exception:
        pass

    return df


def read_additional_table(file_bytes: bytes, filename: str) -> pd.DataFrame:
    bio = io.BytesIO(file_bytes)
    fname = (filename or "").lower()

    if fname.endswith((".xlsx", ".xls", ".xlsm")):
        df = _read_excel_auto_header(bio)
    elif fname.endswith(".csv"):
        df = _read_csv_auto_header(bio)
    else:
        raise ValueError("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ .xlsx/.xls/.xlsm/.csv")

    # —Ç–µ–ø–µ—Ä –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–∑–≤–∏
    rename_map = {}
    for c in df.columns:
        c_str = str(c).strip()  # üëà –≤–∞–∂–ª–∏–≤–æ: –æ–±—Ä—ñ–∑–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏
        low = c_str.lower()
        if c_str in ("Country", "–ö—Ä–∞—ó–Ω–∞", "–°—Ç—Ä–∞–Ω–∞", "–ì–ï–û", "–ì–µ–æ") or low in (
        "country", "–∫—Ä–∞—ó–Ω–∞", "—Å—Ç—Ä–∞–Ω–∞", "–≥–µ–æ", "geo"):
            rename_map[c] = "–ì–ï–û"
        elif c_str in ("–°—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤", "–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤") or low in ("total dep amount", "dep amount", "deposits"):
            rename_map[c] = "–°—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤"
        elif low in ("subid", "sub_id", "sub id"):
            rename_map[c] = "SubID"

    df = df.rename(columns=rename_map)
    return df


# ---------- –§–ª–æ—É-–ø–∏—Ç–∞–Ω–Ω—è ----------

def ask_subids(message: types.Message):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–í–∑—è—Ç–∏ –≤—Å—ñ SubID", callback_data="subid_all"))
    bot.send_message(
        message.chat.id,
        "–í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, <b>SubID</b> (–æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞) –¥–ª—è –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —É <b>–¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö</b> —Ç–∞–±–ª–∏—Ü—è—Ö.\n"
        "‚Ä¢ –ú–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É/–∫—Ä–∞–ø–∫—É –∑ –∫–æ–º–æ—é/–ø—Ä–æ–±—ñ–ª–∏: <code>123,456; 789</code>\n"
        "‚Ä¢ –ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–í–∑—è—Ç–∏ –≤—Å—ñ SubID¬ª.",
        reply_markup=kb,
    )


def ask_additional_table_with_skip(chat_id: int, state: UserState):
    offer = state.offers[state.current_offer_index]
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ–π –æ—Ñ–µ—Ä", callback_data="skip_offer"))

    subid_info = ""
    if state.subid_filters:
        subid_info = "\n(—Ñ—ñ–ª—å—Ç—Ä SubID: <b>" + ", ".join(sorted(state.subid_filters)) + "</b>)"

    bot.send_message(
        chat_id,
        f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>–¥–æ–¥–∞—Ç–∫–æ–≤—É</b> —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –æ—Ñ–µ—Ä—É: <b>{offer}</b>{subid_info}\n\n"
        "–û—á—ñ–∫—É–≤–∞–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: <b>–ì–ï–û</b>, <b>–°—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤</b>"
        + (" —ñ <b>SubID</b>." if state.subid_filters else ".")
        + "\n–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ–π –æ—Ñ–µ—Ä¬ª.",
        reply_markup=kb,
    )


# ---------- –ü–æ–±—É–¥–æ–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É ----------

def build_final_output(state: UserState) -> pd.DataFrame:
    uk_map = state.country_map_uk_to_en
    ru_map = state.country_map_ru_to_en
    canon_map = state.country_canon

    def canon_geo(val: str) -> str:
        return to_canonical_en(val, uk_map, canon_map, ru_map)

    # 1) –¥–æ–¥–∞—Ç–∫–æ–≤—ñ (—Ç–µ, —â–æ –∑—ñ–±—Ä–∞–ª–∏ –∑ —Ñ–∞–π–ª—ñ–≤)
    extra_rows = []
    for offer, geo_map in state.offer_deposits.items():
        for geo_raw, data in geo_map.items():
            extra_rows.append({
                "–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É": offer,
                "–ì–ï–û": geo_raw,
                "Total Dep Amount": float(data.get("sum_dep", 0.0) or 0.0),
                "FTD qty": int(data.get("ftd_qty", 0) or 0),
            })

    if not extra_rows:
        template_cols = [
            "Subid","Offer ID","–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É","–ì–ï–û","FTD qty","Total spend","Total+%",
            "CPA","CPA Target","–°P/–ß","Total Dep Amount","My deposit amount",
            "C. profit Target 40%","C. profit Target 50%","CAP","–û—Å—Ç–∞—Ç–æ–∫ CAP","Current",
        ]
        return pd.DataFrame(columns=template_cols)

    df_extra = pd.DataFrame(extra_rows)
    print("=== EXTRA BEFORE CANON ===")
    print(df_extra)

    # –∫–∞–Ω–æ–Ω—ñ–∑—É—î–º–æ –ì–ï–û —É –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö
    df_extra["–ì–ï–û"] = df_extra["–ì–ï–û"].astype(str).map(canon_geo)

    # —è–∫—â–æ –ø—Ä–∏–π—à–ª–æ –ø–æ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ —Ç–æ–π —Å–∞–º–∏–π –æ—Ñ–µ—Ä+–≥–µ–æ ‚Äî –∑–≥–æ—Ä—Ç–∞—î–º–æ
    df_extra = (
        df_extra.groupby(["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É", "–ì–ï–û"], as_index=False)
                .agg({"Total Dep Amount": "sum", "FTD qty": "sum"})
    )
    print("=== EXTRA AFTER GROUP+CANON ===")
    print(df_extra)

    # 2) main (—Ç–∞–±–ª–∏—Ü—è –±—é–¥–∂–µ—Ç—É)
    df_main = state.main_agg_df.copy()
    if "Total spend" not in df_main.columns:
        df_main["Total spend"] = 0.0
    if "–ü–∞—Ä—Ç–Ω–µ—Ä" not in df_main.columns:
        df_main["–ü–∞—Ä—Ç–Ω–µ—Ä"] = ""

    print("=== MAIN RAW IN build_final_output ===")
    print(df_main.head(30))

    # –∫–∞–Ω–æ–Ω—ñ–∑—É—î–º–æ –ì–ï–û
    df_main["–ì–ï–û"] = df_main["–ì–ï–û"].astype(str).map(canon_geo)

    # üîß –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è Total spend ‚Äî –≤ —Ç–µ–±–µ –≤–æ–Ω–æ —Ç–∏–ø—É "11,69"
    df_main["Total spend"] = (
        df_main["Total spend"]
        .astype(str)
        .str.replace(" ", "", regex=False)
        .str.replace("\u00a0", "", regex=False)
        .str.replace(",", ".", regex=False)
    )
    df_main["Total spend"] = pd.to_numeric(df_main["Total spend"], errors="coerce").fillna(0.0)

    # ‚ùó –≥–æ–ª–æ–≤–Ω–µ: –∞–≥—Ä–µ–≥—É—î–º–æ –ø–æ –ì–ï–û (–∞ –Ω–µ –ø–æ –æ—Ñ–µ—Ä—É), –±–æ –≤ main —É —Ç–µ–±–µ –æ—Ñ–µ—Ä–∏ NaN
    df_main_geo = (
        df_main.groupby("–ì–ï–û", as_index=False)
               .agg({"Total spend": "sum", "–ü–∞—Ä—Ç–Ω–µ—Ä": "first"})
    )
    print("=== MAIN GEO-AGG ===")
    print(df_main_geo)

    # 3) merge: —Ç—ñ–ª—å–∫–∏ –ø–æ –ì–ï–û
    df = pd.merge(
        df_extra,
        df_main_geo,
        on="–ì–ï–û",
        how="left",
    )
    print("=== MERGED BY GEO ONLY ===")
    print(df)

    # 4) –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞
    partner = df["–ü–∞—Ä—Ç–Ω–µ—Ä"].fillna("")
    total_spend = df["Total spend"].fillna(0.0)

    # –ø–æ–∫–∞–∂–µ–º–æ —Ç—ñ, —â–æ –Ω–µ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å
    zero_spend = df[total_spend == 0]
    if not zero_spend.empty:
        print("=== DEBUG: rows with Total spend == 0 AFTER GEO-MERGE ===")
        print(zero_spend[["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É", "–ì–ï–û", "Total spend"]])

    # Total+%: Melbet ‚Üí +35%, —ñ–Ω–∞–∫—à–µ +30%
    # 1.30 = +30%, 1.35 = +35%; –∑—Ä–æ–±–∏–º–æ —è–≤–Ω—ñ—à–µ
    is_melbet = partner.str.lower().str.strip().eq("melbet")
    total_plus = total_spend * (1.35 * is_melbet + 1.30 * (~is_melbet))

    ftd_qty = pd.to_numeric(df["FTD qty"].fillna(0), errors="coerce").fillna(0).astype(int)
    total_dep = pd.to_numeric(df["Total Dep Amount"].fillna(0), errors="coerce").fillna(0.0)

    # CPA
    cpa = (total_plus / ftd_qty.replace(0, pd.NA)).fillna(0.0)

    # CPA TARGET
    CPA_DEFAULT_TARGET = 8
    CPA_OVERRIDES: Dict[str, float] = {
        "Argentina": 20,
        "Bolivia": 15,
        "Venezuela": 5,
        "Gabon": 7,
        "Ghana": 5,
        "Ecuador": 15,
        "Jordan": 40,
        "Iraq": 40,
        "Kazakhstan": 30,
        "Colombia": 11,
        "Malaysia": 40,
        "Paraguay": 15,
        "Pakistan": 15,
        "Peru": 12,
        "Thailand": 22,
        "Uruguay": 12,
        "Philippines": 10,
    }
    cpa_target = df["–ì–ï–û"].map(CPA_OVERRIDES).fillna(CPA_DEFAULT_TARGET)

    # –°P/–ß = total_dep / ftd_qty
    cp_per = (total_dep / ftd_qty.replace(0, pd.NA)).fillna(0.0)

    # My deposit amount = Total Dep Amount / Total+% * 100
    my_dep_amount = (total_dep / total_plus.replace(0, pd.NA) * 100.0).fillna(0.0)

    # C. profit ...
    c_profit_40 = total_plus * 0.4
    c_profit_50 = total_plus * 0.5

    # 5) —Ñ–æ—Ä–º—É—î–º–æ —É –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    template_cols = [
        "Subid","Offer ID","–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É","–ì–ï–û","FTD qty","Total spend","Total+%",
        "CPA","CPA Target","–°P/–ß","Total Dep Amount","My deposit amount",
        "C. profit Target 40%","C. profit Target 50%","CAP","–û—Å—Ç–∞—Ç–æ–∫ CAP","Current",
    ]
    out = pd.DataFrame(columns=template_cols)

    if state.subid_filters:
        out["Subid"] = ", ".join(sorted(state.subid_filters))
    else:
        out["Subid"] = ""

    out["Offer ID"] = df["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"]
    out["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"] = df["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"]
    out["–ì–ï–û"] = df["–ì–ï–û"]
    out["FTD qty"] = ftd_qty
    out["Total spend"] = total_spend
    out["Total+%"] = total_plus
    out["CPA"] = cpa
    out["CPA Target"] = cpa_target
    out["–°P/–ß"] = cp_per
    out["Total Dep Amount"] = total_dep
    out["My deposit amount"] = my_dep_amount
    out["C. profit Target 40%"] = c_profit_40
    out["C. profit Target 50%"] = c_profit_50
    out["CAP"] = ""
    out["–û—Å—Ç–∞—Ç–æ–∫ CAP"] = ""
    out["Current"] = ""

    return out[template_cols]


def send_final_table(chat_id: int, df: pd.DataFrame):
    bio = io.BytesIO()
    with pd.ExcelWriter(bio, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="Result")
        ws = writer.sheets["Result"]
        for col_idx, col_name in enumerate(df.columns, start=1):
            max_len = max([len(str(col_name))] + [len(str(x)) for x in df[col_name]])
            ws.column_dimensions[get_column_letter(col_idx)].width = max_len + 2
    bio.seek(0)
    bot.send_document(chat_id, bio, visible_file_name="result.xlsx", caption="–ì–æ—Ç–æ–≤–æ ‚úÖ")


# ---------- –û–±—Ä–æ–±–Ω–∏–∫–∏ ----------

@bot.message_handler(content_types=["document"])
@require_access
def on_document(message: types.Message):
    chat_id = message.chat.id
    st = user_states.setdefault(chat_id, UserState())

    filename = message.document.file_name or "file"
    file_info = bot.get_file(message.document.file_id)
    file_bytes = bot.download_file(file_info.file_path)

    try:
        if st.phase == "WAIT_CURRENT" and st.flow_active:
            df = read_main_table(file_bytes, filename)

            # üëá —Ç—É—Ç –ó–ê–ü–ê–ú‚Äô–Ø–¢–û–í–£–Ñ–ú–û —Å–∏—Ä—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–∞—Ç–∏
            st.main_agg_df = df  # —è–∫ —ñ –±—É–ª–æ
            st.phase = "WAIT_MONTH"  # üëà –Ω–æ–≤–∞ —Ñ–∞–∑–∞!
            bot.reply_to(
                message,
                "‚úÖ –û—Å–Ω–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é –∑—á–∏—Ç–∞–Ω–æ. –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–º–µ—Ä –º—ñ—Å—è—Ü—è (1-12), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 10."
            )
            return

        if st.phase == "WAIT_ADDITIONAL" and st.flow_active:
            # —á–∏—Ç–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É, —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ SubID (—è–∫—â–æ –∑–∞–¥–∞–Ω—ñ), –¥–æ–¥–∞—î–º–æ
            df_add = read_additional_table(file_bytes, filename)

            offer = st.offers[st.current_offer_index]
            geo_col, dep_col = "–ì–ï–û", "–°—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤"

            if geo_col not in df_add.columns or dep_col not in df_add.columns:
                bot.reply_to(message,
                             "‚ö†Ô∏è –£ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ–º–∞—î –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ (–æ—á—ñ–∫—É—î—Ç—å—Å—è –ì–ï–û —Ç–∞ –°—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤). –ü—Ä–æ–ø—É—â–µ–Ω–æ.")
            else:
                df_work = df_add.copy()
                # —Ñ—ñ–ª—å—Ç—Ä –∑–∞ SubID (—è–∫—â–æ –∑–∞–¥–∞–Ω—ñ)
                if st.subid_filters:
                    if "SubID" not in df_work.columns:
                        bot.reply_to(message,
                                     "‚ö†Ô∏è –í–∏ –≤–∫–∞–∑–∞–ª–∏ SubID, –∞–ª–µ –≤ —Ü—ñ–π –¥–æ–¥–∞—Ç–∫–æ–≤—ñ–π —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ–º–∞—î –∫–æ–ª–æ–Ω–∫–∏ SubID. –¢–∞–±–ª–∏—Ü—é –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                        df_work = df_work.iloc[0:0]  # –ø–æ—Ä–æ–∂–Ω—è
                    else:
                        df_work["__SubID__"] = df_work["SubID"].astype(str).str.strip()
                        df_work = df_work[df_work["__SubID__"].isin(st.subid_filters)]

                # sums + counts per GEO
                pair_sum: Dict[str, float] = {}
                pair_cnt: Dict[str, int] = {}

                for _, row in df_work.iterrows():
                    geo_raw = str(row.get(geo_col, "")).strip()
                    if not geo_raw:
                        continue

                    try:
                        dep_val = float(row.get(dep_col, 0))
                    except:
                        dep_val = 0.0

                    pair_sum[geo_raw] = pair_sum.get(geo_raw, 0.0) + dep_val
                    pair_cnt[geo_raw] = pair_cnt.get(geo_raw, 0) + 1

                if offer not in st.offer_deposits:
                    st.offer_deposits[offer] = {}

                for geo_raw in set(list(pair_sum.keys()) + list(pair_cnt.keys())):
                    prev = st.offer_deposits[offer].get(geo_raw, {"sum_dep": 0.0, "ftd_qty": 0})
                    prev["sum_dep"] = prev.get("sum_dep", 0.0) + pair_sum.get(geo_raw, 0.0)
                    prev["ftd_qty"] = prev.get("ftd_qty", 0) + pair_cnt.get(geo_raw, 0)
                    st.offer_deposits[offer][geo_raw] = prev

            # –Ω–∞—Å—Ç—É–ø–Ω–∏–π –æ—Ñ–µ—Ä –∞–±–æ —Ñ—ñ–Ω–∞–ª
            st.current_offer_index += 1
            if st.current_offer_index < len(st.offers):
                ask_additional_table_with_skip(chat_id, st)
            else:
                try:
                    final_df = build_final_output(st)
                    send_final_table(chat_id, final_df)
                finally:
                    st.finish_flow()
            return

        if st.phase == "WAIT_UNITE_TABLE":
            # –æ–∫—Ä–µ–º–∏–π —Ä–µ–∂–∏–º /unite_geo
            df_in = read_additional_table(file_bytes, filename)  # —á–∏—Ç–∞—î–º–æ —è–∫ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é
            country_col = "–ì–ï–û"
            if country_col not in df_in.columns:
                # –ø—ñ–¥–±–∏—Ä–∞—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
                for alt in ("Country", "–ö—Ä–∞—ó–Ω–∞", "–°—Ç—Ä–∞–Ω–∞", "–ì–µ–æ"):
                    if alt in df_in.columns:
                        df_in = df_in.rename(columns={alt: "–ì–ï–û"})
                        country_col = "–ì–ï–û"
                        break
            if country_col not in df_in.columns:
                bot.reply_to(message, "‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–∫—É –∑ –∫—Ä–∞—ó–Ω–∞–º–∏ (–ì–ï–û / Country / –ö—Ä–∞—ó–Ω–∞ / –°—Ç—Ä–∞–Ω–∞).")
                return

            # –±–µ–∑ —Å–∫–ª–∞–¥–Ω–æ—ó –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª
            bio_out = io.BytesIO()
            with pd.ExcelWriter(bio_out, engine="openpyxl") as writer:
                df_in.to_excel(writer, index=False, sheet_name="Unified")
            bio_out.seek(0)
            bot.send_document(chat_id, bio_out, visible_file_name="united_geo.xlsx", caption="–ì–æ—Ç–æ–≤–æ ‚úÖ")
            st.phase = "IDLE"
            return

        # —è–∫—â–æ —Ñ–∞–π–ª –ø—Ä–∏–π—à–æ–≤ –ø–æ–∑–∞ —Å—Ü–µ–Ω–∞—Ä—ñ—î–º
        bot.reply_to(message, "–Ø –æ—á—ñ–∫—É—é —Ñ–∞–π–ª —É –º–µ–∂–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–æ–∫—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ —Å—Ü–µ–Ω–∞—Ä—ñ–π —Å–ø–æ—á–∞—Ç–∫—É.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: <code>{e}</code>")


@bot.message_handler(func=lambda m: True, content_types=["text"])
@require_access
def on_text(message: types.Message):
    st = user_states.setdefault(message.chat.id, UserState())

    # üëá –Ω–æ–≤–∏–π –∫—Ä–æ–∫ ‚Äî –≤–∏–±—ñ—Ä –º—ñ—Å—è—Ü—è
    if st.flow_active and st.phase == "WAIT_MONTH":
        txt = (message.text or "").strip()
        try:
            month = int(txt)
            if not 1 <= month <= 12:
                raise ValueError
        except ValueError:
            bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 12, –Ω–∞–ø—Ä. 10.")
            return

        df = st.main_agg_df.copy()

        # –ª–æ–∫–∞–ª—å–Ω–∏–π —Ö–µ–ª–ø–µ—Ä: –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ Series –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –Ω–∞–∑–≤–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥—É–±–ª—é–≤–∞–ª–∞—Å—å
        def _ensure_series(dff, col):
            if col not in dff.columns:
                return None
            obj = dff[col]
            if isinstance(obj, pd.DataFrame):
                return obj.iloc[:, 0]
            return obj

        # –ü—Ä–æ–±—É—î–º–æ –≤ —Ç–∞–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É: –≥–æ—Ç–æ–≤–∞ "–ú—ñ—Å—è—Ü—å" ‚Üí "–î–∞—Ç–∞" ‚Üí "–î–∞—Ç–∞_2" ‚Üí "Column 1" ‚Üí "–î–∞—Ç–∞ –≤–∏–∫–ª–∏–∫—É"
        month_ser = None

        mon = _ensure_series(df, "–ú—ñ—Å—è—Ü—å")
        if mon is not None:
            month_ser = pd.to_numeric(mon, errors="coerce").round().astype("Int64")

        if month_ser is None or month_ser.isna().all():
            mask_total = pd.Series(False, index=df.index)
            for cand in ["–î–∞—Ç–∞", "–î–∞—Ç–∞_2", "Column 1", "–î–∞—Ç–∞ –≤–∏–∫–ª–∏–∫—É"]:
                s = _ensure_series(df, cand)
                if s is None:
                    continue
                # –ø–∞—Ä—Å–∏–º–æ dd/mm/yyyy, dd.mm.yyyy, dd-mm-yyyy; dayfirst=True
                s_str = s.astype(str).str.strip()  # —Ç—É—Ç —É–∂–µ —Ç–æ—á–Ω–æ Series
                parsed = pd.to_datetime(
                    s_str
                    .str.replace(".", "/", regex=False)
                    .str.replace("-", "/", regex=False),
                    format="%d/%m/%Y",
                    errors="coerce",
                )
                mask_total |= parsed.dt.month.eq(month)

            # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –¥–∞—Ç–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤—É—î–º–æ.
            df = df[mask_total.fillna(False)].copy()
        else:
            # –º–∞—î–º–æ —á–∏—Å–ª–æ–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å "–ú—ñ—Å—è—Ü—å"
            df = df[month_ser.eq(month).fillna(False)].copy()

        st.main_agg_df = df
        st.phase = "WAIT_SUBID"
        bot.reply_to(message, f"‚úÖ –í—ñ–∑—å–º—É —Ç—ñ–ª—å–∫–∏ –º—ñ—Å—è—Ü—å {month}. –†—è–¥–∫—ñ–≤ –ª–∏—à–∏–ª–æ—Å—å: {len(df)}.")
        ask_subids(message)
        return

    # üëá –æ—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è SubID —É —Ñ–ª–æ—É
    if st.flow_active and st.phase == "WAIT_SUBID":
        raw = (message.text or "").strip()
        if raw:
            # –¥—ñ–ª–∏–º–æ –∑–∞ –∫–æ–º–æ—é/–∫—Ä–∞–ø–∫–æ—é –∑ –∫–æ–º–æ—é/–ø—Ä–æ–±—ñ–ª–∞–º–∏
            parts = re.split(r"[,\;\s]+", raw)
            parts = [p.strip() for p in parts if p.strip()]
            if parts:
                st.subid_filters = set(parts)
                st.phase = "WAIT_ADDITIONAL"

                # –ø—ñ–¥–≥–æ—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ—Ñ–µ—Ä—ñ–≤ —ñ–∑ main
                offers_col = st.main_agg_df.get("–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É")
                if offers_col is not None:
                    st.offers = offers_col.dropna().astype(str).unique().tolist()
                else:
                    st.offers = []

                st.current_offer_index = 0
                bot.reply_to(message, "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ SubID: <b>" + ", ".join(parts) + "</b>")
                ask_additional_table_with_skip(message.chat.id, st)
                return

        # —è–∫—â–æ –ø—É—Å—Ç–æ ‚Äî –≤—ñ–∑—å–º–µ–º–æ –≤—Å—ñ
        st.subid_filters = None
        st.phase = "WAIT_ADDITIONAL"

        offers_col = st.main_agg_df.get("–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É")
        if offers_col is not None:
            st.offers = offers_col.dropna().astype(str).unique().tolist()
        else:
            st.offers = []

        st.current_offer_index = 0
        bot.reply_to(message, "–í—ñ–∑—å–º—É <b>–≤—Å—ñ</b> SubID.")
        ask_additional_table_with_skip(message.chat.id, st)
        return

    # —ñ–Ω—à—ñ —Ç–µ–∫—Å—Ç–∏
    if not st.flow_active:
        bot.reply_to(message, "–°–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—é –∞–±–æ /unite_geo –¥–ª—è —É–Ω—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó –∫—Ä–∞—ó–Ω.")
    else:
        bot.reply_to(message, "–ó–∞—Ä–∞–∑ —Ç—Ä–∏–≤–∞—î —Å—Ü–µ–Ω–∞—Ä—ñ–π. –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –ø—ñ–¥–∫–∞–∑–æ–∫ —É —á–∞—Ç—ñ.")


@bot.callback_query_handler(func=lambda c: c.data == "skip_offer")
@require_access_cb
def on_skip_offer(call: types.CallbackQuery):
    st = user_states.setdefault(call.message.chat.id, UserState())
    if not (st.flow_active and st.phase == "WAIT_ADDITIONAL"):
        bot.answer_callback_query(call.id, "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–æ–∫—É.")
        return

    # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –æ—Ñ–µ—Ä
    st.current_offer_index += 1
    bot.answer_callback_query(call.id, "–û—Ñ–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    if st.current_offer_index < len(st.offers):
        ask_additional_table_with_skip(call.message.chat.id, st)
    else:
        try:
            final_df = build_final_output(st)
            send_final_table(call.message.chat.id, final_df)
        finally:
            st.finish_flow()


@bot.callback_query_handler(func=lambda c: c.data == "subid_all")
@require_access_cb
def on_subid_all(call: types.CallbackQuery):
    st = user_states.setdefault(call.message.chat.id, UserState())
    if not (st.flow_active and st.phase == "WAIT_SUBID"):
        bot.answer_callback_query(call.id, "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–æ–∫—É.")
        return
    st.subid_filters = None
    st.phase = "WAIT_ADDITIONAL"
    st.offers = st.main_agg_df["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"].dropna().astype(str).unique().tolist()
    st.current_offer_index = 0
    bot.answer_callback_query(call.id, "–ë–µ—Ä—É –≤—Å—ñ SubID")
    bot.edit_message_text(
        "‚úÖ –ë—É–¥—É –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ <b>–≤—Å—ñ</b> SubID. –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ –ø–æ –æ—Ñ–µ—Ä–∞—Ö.",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
    )
    ask_additional_table_with_skip(call.message.chat.id, st)


# ---------- main ----------

def main():
    print("Bot is polling...")
    bot.infinity_polling()


if __name__ == "__main__":
    main()
