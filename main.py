import os
import io
import re
from typing import Dict, List, Tuple
from dotenv import load_dotenv

from telebot import TeleBot, types
from openai import OpenAI
import numpy as np
import pandas as pd
from pandas import ExcelWriter
from typing import Optional

from datetime import datetime
from openpyxl.utils import get_column_letter
from openpyxl.formatting.rule import FormulaRule
from openpyxl.styles import PatternFill

load_dotenv()

# ===================== CONFIG =====================
BOT_TOKEN = os.getenv("BOT_TOKEN")
MAIN_SHEET_NAME = "BUDG"  # read this sheet from the main file
ALLOWED_MAIN_COLUMNS = ["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É", "–ì–ï–û", "–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏"]
ADDITIONAL_REQUIRED_COLS = ["–ö—Ä–∞—ó–Ω–∞", "–°—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤"]

OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-5")
OPENAI_MAX_CHARS = 60_000  # –±–µ–∑–ø–µ—á–Ω–∏–π –ª—ñ–º—ñ—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
OPENAI_OUTPUT_COLUMN = "Total spend"  # –∫–æ–ª–æ–Ω–∫–∞, —è–∫—É –º–æ–¥–µ–ª—å –º–∞—î –∑–∞–ø–æ–≤–Ω–∏—Ç–∏/–ø–µ—Ä–µ—Ä–∞—Ö—É–≤–∞—Ç–∏

bot = TeleBot(BOT_TOKEN, parse_mode="HTML")

H_THRESH = 9.0  # H <= 9 is "good"
L_THRESH = 39.99  # L > 39.99 is "good" (strict >)
CPA_CAP = 11.0
EPS = 1e-12
EPS_YEL = 1e-6

# CPA Target defaults and overrides
CPA_DEFAULT_TARGET = 8
CPA_OVERRIDES: Dict[str, float] = {
    "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞": 20,
    "–ë–æ–ª—ñ–≤—ñ—è": 15,
    "–í–µ–Ω–µ—Å—É–µ–ª–∞": 5,
    "–ì–∞–±–æ–Ω": 7,
    "–ì–∞–Ω–∞": 5,
    "–ï–∫–≤–∞–¥–æ—Ä": 15,
    "–ô–æ—Ä–¥–∞–Ω—ñ—è": 40,
    "–Ü—Ä–∞–∫": 40,
    "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": 30,
    "–ö–æ–ª—É–º–±—ñ—è": 11,
    "–ú–∞–ª–∞–π–∑—ñ—è": 40,
    "–ü–∞—Ä–∞–≥–≤–∞–π": 15,
    "–ü–∞–∫–∏—Å—Ç–∞–Ω": 15,
    "–ü–µ—Ä—É": 12,
    "–¢–∞—ó–ª–∞–Ω–¥": 22,
    "–£—Ä—É–≥–≤–∞–π": 12,
    "–§—ñ–ª—ñ–ø–ø—ñ–Ω–∏": 10,
}


# ===================== STATE =====================
class UserState:
    def __init__(self):
        self.alloc_mode = None
        self.phase = "WAIT_MAIN"  # WAIT_MAIN -> WAIT_ADDITIONAL, plus allocate flow
        self.main_agg_df: Optional[pd.DataFrame] = None
        self.offers: List[str] = []
        self.current_offer_index: int = 0
        self.offer_deposits: Dict[str, Dict[str, Dict[str, float]]] = {}

        # country maps
        self.country_map_uk_to_en = build_country_map_uk_to_en()
        self.country_canon = build_country_canonical()

        # --- allocate flow state ---
        self.alloc_df: Optional[pd.DataFrame] = None  # parsed result.xlsx
        self.alloc_budget: Optional[float] = None


user_states: Dict[int, UserState] = {}

# ===== ACCESS CONTROL =====
# –ó–∞–ø–æ–≤–Ω–∏ —Å–≤–æ—ó–º–∏ Telegram ID (int). –ú–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —É .env —ñ –ø–∞—Ä—Å–∏—Ç–∏ –∑ ENV.
ALLOWED_USER_IDS = {
    155840708,
    7877906786,
    817278554,
    480823885
}


def _deny_access_message():
    return (
        "‚õî <b>–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.</b>\n"
        "–Ø–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–æ—Å—Ç—É–ø ‚Äî –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞."
    )


def _is_allowed_user(user_id: int) -> bool:
    return user_id in ALLOWED_USER_IDS


# –î–ª—è message-—Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
def require_access(handler_func):
    def wrapper(message, *args, **kwargs):
        user_id = getattr(message.from_user, "id", None)
        if user_id is None or not _is_allowed_user(user_id):
            bot.reply_to(message, _deny_access_message())
            return
        return handler_func(message, *args, **kwargs)

    return wrapper


# –î–ª—è callback-query (—ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏)
def require_access_cb(handler_func):
    def wrapper(call, *args, **kwargs):
        user_id = getattr(call.from_user, "id", None)
        if user_id is None or not _is_allowed_user(user_id):
            try:
                bot.answer_callback_query(call.id, "‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
            except Exception:
                pass
            bot.send_message(call.message.chat.id, _deny_access_message())
            return
        return handler_func(call, *args, **kwargs)

    return wrapper


def _df_to_csv(df: pd.DataFrame) -> str:
    # –ë–µ–∑ —ñ–Ω–¥–µ–∫—Å—É, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ ‚Äú–ø–ª–æ—Å–∫–æ‚Äù
    bio = io.StringIO()
    df.to_csv(bio, index=False)
    return bio.getvalue()


def _split_df_by_size(df: pd.DataFrame, max_chars: int = OPENAI_MAX_CHARS) -> list[pd.DataFrame]:
    """
    –î—ñ–ª–∏–º–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –Ω–∞ —á–∞–Ω–∫–∏, —â–æ–± CSV –∫–æ–∂–Ω–æ–≥–æ –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞–≤ –ª—ñ–º—ñ—Ç —Å–∏–º–≤–æ–ª—ñ–≤.
    """
    # –≥—Ä—É–±–∞ –æ—Ü—ñ–Ω–∫–∞ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É —Ä—è–¥–∫–∞
    sample = min(len(df), 20)
    avg_row_len = len(_df_to_csv(df.head(sample))) / max(sample, 1)
    # –∑–∞–ø–∞—Å: —à–∞–ø–∫–∞ + –ø—Ä–æ–º–ø—Ç
    rows_per_chunk = max(5, int((max_chars - 3000) / max(avg_row_len, 1)))
    chunks = []
    for i in range(0, len(df), rows_per_chunk):
        chunks.append(df.iloc[i:i + rows_per_chunk].copy())
    return chunks


def _csv_from_text(text: str) -> str:
    """
    –í–∏—Ç—è–≥—É—î CSV –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –±–µ–∑ –∫–æ–¥-–±–ª–æ–∫—ñ–≤ —Ç–∞ –∑ ```csv ... ```).
    """
    t = text.strip()
    if "```" in t:
        # –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–Ω–∞–π—Ç–∏ fenced block
        parts = t.split("```")
        # —à—É–∫–∞—î–º–æ –±–ª–æ–∫ –∑ csv –∞–±–æ –ø–µ—Ä—à–∏–π –∫–æ–¥-–±–ª–æ–∫
        best = None
        for i in range(1, len(parts), 2):
            block = parts[i]
            if block.lstrip().lower().startswith("csv"):
                best = block.split("\n", 1)[1] if "\n" in block else ""
                break
        if best is None:
            # –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –∫–æ–¥-–±–ª–æ–∫ —è–∫ fallback
            best = parts[1]
        return best.strip()
    return t


# ===================== NORMALIZATION (countries) =====================

def normalize_text(s: str) -> str:
    return re.sub(r"\s+", " ", str(s)).strip().lower()


def build_country_map_uk_to_en() -> Dict[str, str]:
    m = {
        "–ë–µ–Ω—ñ–Ω": "Benin",
        "–ë—É—Ä–∫—ñ–Ω–∞-–§–∞—Å–æ": "Burkina Faso",
        "–ì–∞–±–æ–Ω": "Gabon",
        "–ì–∞—ó—Ç—ñ": "Haiti",
        "–ì–∞–Ω–∞": "Ghana",

        # ‚ùó —É—Ç–æ—á–Ω–µ–Ω–Ω—è: —É XLSX –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è "Guinea-Conakry"
        # —â–æ–± –∑–≤‚Äô—è–∑–∞—Ç–∏ –∑ –¥–æ–¥. —Ç–∞–±–ª–∏—Ü—è–º–∏, –º–∞–ø–∏–º–æ —É–∫—Ä "–ì–≤—ñ–Ω–µ—è" —Å–∞–º–µ –Ω–∞ "Guinea-Conakry"
        # (–¥–∞–ª—ñ –≤ –∫–∞–Ω–æ–Ω—ñ –∑–≤–µ–¥–µ–º–æ —Ü–µ –¥–æ "Guinea")
        "–ì–≤—ñ–Ω–µ—è": "Guinea-Conakry",

        # ---- DRC/ROC ----
        "–î–µ–º–æ–∫—Ä–∞—Ç–∏—á–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö–æ–Ω“ë–æ": "Congo (Kinshasa)",
        "–î–† –ö–æ–Ω–≥–æ": "Congo (Kinshasa)",
        "–ö–æ–Ω–≥–æ (–ö—ñ–Ω—à–∞—Å–∞)": "Congo (Kinshasa)",
        "–†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö–æ–Ω–≥–æ": "Congo (Brazzaville)",
        "–ö–æ–Ω–≥–æ-–ë—Ä–∞–∑–∑–∞–≤—ñ–ª—å": "Congo (Brazzaville)",
        # —è–∫—â–æ –ø—Ä–æ—Å—Ç–æ "–ö–æ–Ω–≥–æ" ‚Äî –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º DRC
        "–ö–æ–Ω–≥–æ": "Congo (Kinshasa)",

        "–ö–∞–º–µ—Ä—É–Ω": "Cameroon",

        # –ö–æ—Ç-–¥‚Äô–Ü–≤—É–∞—Ä ‚Äî –æ–¥—Ä–∞–∑—É –∫—ñ–ª—å–∫–∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
        "–ö–æ—Ç-–¥'–Ü–≤—É–∞—Ä": "Cote d'Ivoire",
        "–ö–æ—Ç-–¥‚Äô–Ü–≤—É–∞—Ä": "Cote d'Ivoire",
        "–ö–æ—Ç –¥‚Äô–Ü–≤—É–∞—Ä": "Cote d'Ivoire",

        "–ö–µ–Ω—ñ—è": "Kenya",
        "–°–µ–Ω–µ–≥–∞–ª": "Senegal",
        "–°—å—î—Ä—Ä–∞-–õ–µ–æ–Ω–µ": "Sierra Leone",
        "–¢–∞–Ω–∑–∞–Ω—ñ—è": "Tanzania",
        "–¢–æ–≥–æ": "Togo",
        "–£–≥–∞–Ω–¥–∞": "Uganda",
        "–ó–∞–º–±—ñ—è": "Zambia",
        "–ï—Ñ—ñ–æ–ø—ñ—è": "Ethiopia",
        "–ù—ñ–≥–µ—Ä": "Niger",
        "–ù—ñ–≥–µ—Ä—ñ—è": "Nigeria",
        "–ú–∞–ª—ñ": "Mali",
        "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "Kazakhstan",
        "–Ü—Å–ø–∞–Ω—ñ—è": "Spain",
        "–§—Ä–∞–Ω—Ü—ñ—è": "France",
        "–Ü—Ç–∞–ª—ñ—è": "Italy",
        "–ü–æ—Ä—Ç—É–≥–∞–ª—ñ—è": "Portugal",
        "–î–æ–º—ñ–Ω—ñ–∫–∞–Ω—Å—å–∫–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞": "Dominican Republic",
        "–ö–∞–Ω–∞–¥–∞": "Canada",
        "–§—ñ–ª—ñ–ø–ø—ñ–Ω–∏": "Philippines",

        # üîπ –¥–æ–¥–∞–Ω–æ –∑ –≤–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É ¬´missing¬ª
        "–ë–æ–ª—ñ–≤—ñ—è": "Bolivia",
        "–ï–∫–≤–∞–¥–æ—Ä": "Ecuador",
        "–ö–æ–ª—É–º–±—ñ—è": "Colombia",
        "–ü–∞—Ä–∞–≥–≤–∞–π": "Paraguay",
        "–ü–µ—Ä—É": "Peru",
    }
    return {normalize_text(k): v for k, v in m.items()}


def build_country_canonical() -> Dict[str, str]:
    canon = {
        # —Å–∞–º–æ–∫–∞–Ω–æ–Ω—ñ—á–Ω—ñ EN
        "Benin": "Benin",
        "Burkina Faso": "Burkina Faso",
        "Gabon": "Gabon",
        "Haiti": "Haiti",
        "Ghana": "Ghana",
        "Guinea": "Guinea",
        "Congo (Kinshasa)": "Congo (Kinshasa)",
        "Congo (Brazzaville)": "Congo (Brazzaville)",
        "Cameroon": "Cameroon",
        "Cote d'Ivoire": "Cote d'Ivoire",
        "Kenya": "Kenya",
        "Senegal": "Senegal",
        "Sierra Leone": "Sierra Leone",
        "Tanzania": "Tanzania",
        "Togo": "Togo",
        "Uganda": "Uganda",
        "Zambia": "Zambia",
        "Ethiopia": "Ethiopia",
        "Niger": "Niger",
        "Nigeria": "Nigeria",
        "Mali": "Mali",
        "Kazakhstan": "Kazakhstan",
        "Spain": "Spain",
        "France": "France",
        "Italy": "Italy",
        "Portugal": "Portugal",
        "Dominican Republic": "Dominican Republic",
        "Canada": "Canada",
        "Philippines": "Philippines",

        # üîπ –¥–æ–¥–∞–Ω–æ –∑ –≤–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É ¬´missing¬ª
        "Bolivia": "Bolivia",
        "Ecuador": "Ecuador",
        "Colombia": "Colombia",
        "Paraguay": "Paraguay",
        "Peru": "Peru",

        # —Å–∏–Ω–æ–Ω—ñ–º–∏/–≤–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è ‚Üí –∫–∞–Ω–æ–Ω
        # Cote d'Ivoire
        "Cote DIvoire": "Cote d'Ivoire",
        "Cote dIvoire": "Cote d'Ivoire",
        "Cote D Ivoire": "Cote d'Ivoire",
        "Cote d‚Äôivoire": "Cote d'Ivoire",
        "C√¥te d‚ÄôIvoire": "Cote d'Ivoire",
        "Ivory Coast": "Cote d'Ivoire",

        # Guinea-Conakry ‚Üí Guinea
        "Guinea-Conakry": "Guinea",
        "Guinea Conakry": "Guinea",
        "Guinea, Conakry": "Guinea",

        # DRC/ROC –≤–∞—Ä—ñ–∞–Ω—Ç–∏
        "DRC": "Congo (Kinshasa)",
        "DR Congo": "Congo (Kinshasa)",
        "Congo (DRC)": "Congo (Kinshasa)",
        "Democratic Republic of the Congo": "Congo (Kinshasa)",
        "Democratic Republic of Congo": "Congo (Kinshasa)",
        "Congo-Kinshasa": "Congo (Kinshasa)",

        "Republic of the Congo": "Congo (Brazzaville)",
        "Congo Republic": "Congo (Brazzaville)",
        "Congo-Brazzaville": "Congo (Brazzaville)",

        # UA ‚Üí EN –∫–∞–Ω–æ–Ω (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –¥–µ—Å—å –ø—Ä–æ—Å–æ—á–∏—Ç—å—Å—è —É–∫—Ä —É –¥–æ–¥. —Ç–∞–±–ª–∏—Ü—è—Ö)
        "–∫–æ—Ç-–¥'—ñ–≤—É–∞—Ä": "Cote d'Ivoire",
        "–∫–æ—Ç-–¥‚Äô—ñ–≤—É–∞—Ä": "Cote d'Ivoire",
        "–∫–æ—Ç –¥‚Äô—ñ–≤—É–∞—Ä": "Cote d'Ivoire",
        "–≥–≤—ñ–Ω–µ—è": "Guinea",
        "–±–æ–ª—ñ–≤—ñ—è": "Bolivia",
        "–µ–∫–≤–∞–¥–æ—Ä": "Ecuador",
        "–∫–æ–ª—É–º–±—ñ—è": "Colombia",
        "–ø–∞—Ä–∞–≥–≤–∞–π": "Paraguay",
        "–ø–µ—Ä—É": "Peru",
    }
    return {normalize_text(k): v for k, v in canon.items()}


def to_canonical_en(country: str, uk_to_en: Dict[str, str], canonical: Dict[str, str]) -> str:
    key = normalize_text(country)
    if key in uk_to_en:
        return canonical.get(normalize_text(uk_to_en[key]), uk_to_en[key])
    if key in canonical:
        return canonical[key]
    if key in {"–∫–æ–Ω–≥–æ", "congo"}:
        return "Congo (Kinshasa)"
    return country


def cpa_target_for_geo(geo: Optional[str]) -> float:
    try:
        key = str(geo).strip()
    except Exception:
        key = ""
    return CPA_OVERRIDES.get(key, CPA_DEFAULT_TARGET)


# ===================== FLEXIBLE HEADER / COLUMN MATCH =====================

def detect_header_row(df: pd.DataFrame, required: List[str], max_scan: int = 60,
                      scan_rows: Optional[int] = None) -> int:
    # accept either max_scan or scan_rows for backward compatibility
    if scan_rows is not None:
        max_scan = scan_rows
    req_norm = [normalize_text(r) for r in required]
    for i in range(min(max_scan, len(df))):
        row_vals = [normalize_text(x) for x in list(df.iloc[i].values)]
        if all(any(h == v for v in row_vals) for h in req_norm):
            return i
    return 0


def match_columns(actual_cols, required_labels: List[str]) -> Optional[Dict[str, str]]:
    norm_actual = {normalize_text(str(c)): str(c) for c in actual_cols}
    out = {}
    for need in required_labels:
        key = normalize_text(need)
        if key in norm_actual:
            out[need] = norm_actual[key]
            continue
        # punctuation-insensitive
        found = None
        for k, v in norm_actual.items():
            if normalize_text(re.sub(r"[^\w\s'‚Äô]", "", k)) == normalize_text(re.sub(r"[^\w\s'‚Äô]", "", key)):
                found = v
                break
        if not found:
            return None
        out[need] = found
    return out


# ===================== FILE READERS =====================
# ADD
def read_excel_robust(file_bytes: bytes, sheet_name: str, header: int = 0) -> pd.DataFrame:
    """
    Robust Excel reader with multiple fallback strategies.
    Filters to the current month:
      - Prefer column '–ú—ñ—Å—è—Ü—å' (numeric month: 1..12).
      - Fallback to column '–î–∞—Ç–∞' (dd/mm/YYYY).
    """
    bio = io.BytesIO(file_bytes)
    errors = []

    # Helper: filter to current month
    def filter_current_month(df: pd.DataFrame) -> pd.DataFrame:
        cur_month = datetime.now().month

        if "–ú—ñ—Å—è—Ü—å" in df.columns:
            # Accept strings like "09", numbers like 9.0, etc.
            month_series = pd.to_numeric(df["–ú—ñ—Å—è—Ü—å"], errors="coerce")
            return df[month_series == cur_month]

        return df

    # Strategy 1: openpyxl
    try:
        bio.seek(0)
        df = pd.read_excel(bio, sheet_name=sheet_name, header=header, engine="openpyxl")
        return filter_current_month(df)
    except Exception as e:
        errors.append(f"openpyxl: {e}")
        print(f"openpyxl failed: {e}")

    # Strategy 2: openpyxl without header, set manually
    try:
        bio.seek(0)
        df_raw = pd.read_excel(bio, sheet_name=sheet_name, header=None, engine="openpyxl")
        if header > 0:
            new_header = df_raw.iloc[header].tolist()
            df = df_raw.iloc[header + 1:].reset_index(drop=True)
            df.columns = new_header
        else:
            df = df_raw
        return filter_current_month(df)
    except Exception as e:
        errors.append(f"openpyxl manual header: {e}")
        print(f"Manual header setting failed: {e}")

    # Strategy 3: calamine
    try:
        bio.seek(0)
        df = pd.read_excel(bio, sheet_name=sheet_name, header=header, engine="calamine")
        return filter_current_month(df)
    except Exception as e:
        errors.append(f"calamine: {e}")
        print(f"calamine failed: {e}")

    # Strategy 4: xlrd
    try:
        bio.seek(0)
        df = pd.read_excel(bio, sheet_name=sheet_name, header=header, engine="xlrd")
        return filter_current_month(df)
    except Exception as e:
        errors.append(f"xlrd: {e}")
        print(f"xlrd failed: {e}")

    raise ValueError(f"Could not read Excel file with any engine. Errors: {'; '.join(errors)}")


def load_main_budg_table(file_bytes: bytes, filename: str = "uploaded") -> pd.DataFrame:
    df = None
    errors = []

    if filename.lower().endswith((".xlsx", ".xls", ".xlsm")):
        try:
            df = read_excel_robust(file_bytes, sheet_name="BUDG", header=1)
        except Exception as e1:
            errors.append(f"header=1: {e1}")
            # (your existing Excel fallback logic remains unchanged)
    else:
        # CSV support
        bio = io.BytesIO(file_bytes)
        try:
            df_raw = pd.read_csv(bio, header=None)
        except Exception:
            bio.seek(0)
            try:
                df_raw = pd.read_csv(bio, header=None, encoding="cp1251")
            except Exception:
                bio.seek(0)
                df_raw = pd.read_csv(bio, header=None, encoding="utf-8")

        # detect header row (similar to Excel logic)
        header_row = -1
        for i in range(min(10, len(df_raw))):
            row_values = [str(v).lower().strip() for v in df_raw.iloc[i].values]
            if any("–Ω–∞–∑–≤–∞" in val and "–æ—Ñ—Ñ–µ—Ä" in val for val in row_values) and \
                    any("–≥–µ–æ" in val for val in row_values) and \
                    any("–≤–∏—Ç—Ä–∞—Ç" in val for val in row_values):
                header_row = i
                break

        if header_row >= 0:
            new_header = df_raw.iloc[header_row].tolist()
            df = df_raw.iloc[header_row + 1:].reset_index(drop=True)
            df.columns = new_header
        else:
            df = df_raw

        # --- filter current month ---
        # cur_month = datetime.now().month
        cur_month = 9

        if "–ú—ñ—Å—è—Ü—å" in df.columns:
            df["–ú—ñ—Å—è—Ü—å"] = pd.to_numeric(df["–ú—ñ—Å—è—Ü—å"], errors="coerce")
            df = df[df["–ú—ñ—Å—è—Ü—å"] == cur_month]
        elif "–î–∞—Ç–∞" in df.columns:
            df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], format="%d/%m/%Y", errors="coerce")
            df = df[(df["–î–∞—Ç–∞"].dt.month == cur_month) & (df["–î–∞—Ç–∞"].dt.year == datetime.now().year)]

    if df is None:
        raise ValueError(f"Could not load BUDG sheet. Errors: {'; '.join(errors)}")

    # clean column names
    df.columns = [str(c).replace("\xa0", " ").replace("\u00A0", " ").strip() for c in df.columns]

    # validate and map columns
    colmap = match_columns(df.columns, ALLOWED_MAIN_COLUMNS)
    if not colmap:
        available = [str(c) for c in df.columns]
        required = ALLOWED_MAIN_COLUMNS
        raise ValueError(
            f"–£ BUDG –º–∞—é—Ç—å –±—É—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏: {required}.\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {available}\n"
            f"–ü–µ—Ä–µ–≤—ñ—Ä –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ —É —Ñ–∞–π–ª—ñ."
        )

    df = df[[colmap["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"], colmap["–ì–ï–û"], colmap["–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏"]]].copy()
    df.columns = ["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É", "–ì–ï–û", "–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏"]

    return df


def read_additional_table(file_bytes: bytes, filename: str) -> pd.DataFrame:
    """
    Read additional table with improved error handling
    """
    bio = io.BytesIO(file_bytes)

    if filename.lower().endswith((".xlsx", ".xls", ".xlsm")):
        # Try multiple strategies for Excel files
        try:
            df_raw = pd.read_excel(bio, header=None, engine="openpyxl")
        except Exception:
            try:
                bio.seek(0)
                df_raw = pd.read_excel(bio, header=None, engine="calamine")
            except Exception:
                bio.seek(0)
                df_raw = pd.read_excel(bio, header=None, engine="xlrd")
    else:
        # CSV files
        try:
            df_raw = pd.read_csv(bio, header=None)
        except Exception:
            bio.seek(0)
            try:
                df_raw = pd.read_csv(bio, header=None, encoding="cp1251")
            except Exception:
                bio.seek(0)
                df_raw = pd.read_csv(bio, header=None, encoding="utf-8")

    # Find header row
    header_idx = detect_header_row(df_raw, [normalize_text(x) for x in ADDITIONAL_REQUIRED_COLS])

    # Validate header row exists
    if header_idx >= len(df_raw):
        raise ValueError(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —É —Ñ–∞–π–ª—ñ {filename}")

    headers = df_raw.iloc[header_idx].tolist()
    data = df_raw.iloc[header_idx + 1:].reset_index(drop=True)
    data.columns = headers

    # Clean column names
    data.columns = [str(c).replace("\xa0", " ").replace("\u00A0", " ").strip() for c in data.columns]

    col_map = match_columns(data.columns, ADDITIONAL_REQUIRED_COLS)
    if not col_map:
        available = [str(c) for c in data.columns]
        required = ADDITIONAL_REQUIRED_COLS
        raise ValueError(
            f"–£ —Ñ–∞–π–ª—ñ {filename} –º–∞—é—Ç—å –±—É—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏: {required}.\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {available}\n"
            f"–ü–µ—Ä–µ–≤—ñ—Ä –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ —É —Ñ–∞–π–ª—ñ."
        )

    df = data[[col_map["–ö—Ä–∞—ó–Ω–∞"], col_map["–°—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤"]]].copy()
    df.columns = ["–ö—Ä–∞—ó–Ω–∞", "–°—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤"]
    return df


# ===================== HELPERS =====================

def inject_formulas_and_cf(
        ws,
        *,
        header_row: int = 1,
        first_data_row: int = 2,
        last_data_row: int | None = None,
):
    """
    –î–æ–¥–∞—î —Ñ–æ—Ä–º—É–ª–∏ —É –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞ CF-–ø—ñ–¥—Å–≤—ñ—Ç–∫—É.
    –û—á—ñ–∫—É—î—Ç—å—Å—è, —â–æ —É —à–∞–ø—Ü—ñ –≤–∂–µ —î –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏:
    - 'Total spend' (F), 'FTD qty' (E), 'Total Dep Amount' (K), 'My deposit amount' (L)
    –Ø–∫—â–æ —ñ–Ω—à–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ (Total+%, CPA, –°P/–ß, Target 40/50%) –Ω–µ–º–∞—î ‚Äî —Å—Ç–≤–æ—Ä–∏–º–æ.

    –§–æ—Ä–º—É–ª–∏:
      G: Total+%                 = Total spend * 1.3
      H: CPA                     = Total+% / FTD qty
      (–∫–∏—Ä–∏–ª–∏—Ü—è) '–°P/–ß'          = Total Dep Amount / FTD qty
      'C. profit Target 40%'     = Total+% * 0.4
      'C. profit Target 50%'     = Total+% * 0.5
      L: My deposit amount       = Total Dep Amount / Total+% * 100

    """

    if last_data_row is None:
        last_data_row = ws.max_row
    if last_data_row < first_data_row:
        return

    # --- Map header name -> column index (—Å—Ç–≤–æ—Ä—é—î–º–æ, —è–∫—â–æ —Ç—Ä–µ–±–∞)
    headers = {ws.cell(row=header_row, column=c).value: c for c in range(1, ws.max_column + 1) if
               ws.cell(row=header_row, column=c).value}

    def ensure_col(name: str) -> int:
        if name in headers:
            return headers[name]
        col = ws.max_column + 1
        ws.cell(row=header_row, column=col, value=name)
        headers[name] = col
        return col

    col_idx = {
        "Total spend": ensure_col("Total spend"),
        "FTD qty": ensure_col("FTD qty"),
        "Total Dep Amount": ensure_col("Total Dep Amount"),
        "My deposit amount": ensure_col("My deposit amount"),
        "Total+%": ensure_col("Total+%"),
        "CPA": ensure_col("CPA"),
        "CPA Target": ensure_col("CPA Target"),
        "–°P/–ß": ensure_col("–°P/–ß"),  # –ø–µ—Ä—à–∞ –ª—ñ—Ç–µ—Ä–∞ ‚Äî –∫–∏—Ä–∏–ª–∏—á–Ω–∞ "–°"
        "C. profit Target 40%": ensure_col("C. profit Target 40%"),
        "C. profit Target 50%": ensure_col("C. profit Target 50%"),
    }

    # –£ –∑—Ä—É—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ ‚Äî –∫–æ–ª. –ª—ñ—Ç–µ—Ä–∏
    letter = {k: get_column_letter(v) for k, v in col_idx.items()}

    F = letter["Total spend"]
    E = letter["FTD qty"]
    K = letter["Total Dep Amount"]
    L = letter["My deposit amount"]
    G = letter["Total+%"]
    H = letter["CPA"]
    I = letter["CPA Target"]
    CPCH = letter["–°P/–ß"]
    C40 = letter["C. profit Target 40%"]
    C50 = letter["C. profit Target 50%"]

    # --- –ü—Ä–æ–ø–∏—Å—É—î–º–æ —Ñ–æ—Ä–º—É–ª–∏ –ø–æ —Ä—è–¥–∫–∞—Ö
    for r in range(first_data_row, last_data_row + 1):
        ws[f"{G}{r}"] = f"={F}{r}*1.3"
        ws[f"{H}{r}"] = f"={G}{r}/{E}{r}"
        ws[f"{CPCH}{r}"] = f"={K}{r}/{E}{r}"
        ws[f"{C40}{r}"] = f"={G}{r}*0.4"
        ws[f"{C50}{r}"] = f"={G}{r}*0.5"
        # L —è–∫ —Ñ–æ—Ä–º—É–ª–∞ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—â–æ –±—É–ª–∏)
        ws[f"{L}{r}"] = f"={K}{r}/{G}{r}*100"

    # --- Conditional Formatting (–æ–Ω–æ–≤–ª–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞) ---
    first_col_letter = get_column_letter(1)
    last_col_letter = get_column_letter(ws.max_column)
    data_range = f"{first_col_letter}{first_data_row}:{last_col_letter}{last_data_row}"

    grey = PatternFill(start_color="BFBFBF", end_color="BFBFBF", fill_type="solid")
    green = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")
    yellow = PatternFill(start_color="FFEB9C", end_color="FFEB9C", fill_type="solid")
    red = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

    # Dynamic threshold per GEO (–ì–∞–±–æ–Ω=59, else 39)
    try:
        GEO_col_idx = headers.get("–ì–ï–û") or headers.get("Geo") or headers.get("GEO") or headers.get("–ö—Ä–∞—ó–Ω–∞")
        GEO = get_column_letter(GEO_col_idx) if GEO_col_idx else None
    except Exception:
        GEO = None
    THR = f'IF(${GEO}{first_data_row}="–ì–∞–±–æ–Ω",59,39)' if GEO else "39"

    # Grey: E = 0
    ws.conditional_formatting.add(
        data_range,
        FormulaRule(formula=[f"${E}{first_data_row}=0"], fill=grey, stopIfTrue=True),
    )

    # Green: INT(H) <= INT(I) AND L > 39
    ws.conditional_formatting.add(
        data_range,
        FormulaRule(
            formula=[
                f"AND(${E}{first_data_row}>0,INT(${H}{first_data_row})<=INT(${I}{first_data_row}),${L}{first_data_row}>{THR})"],
            fill=green,
            stopIfTrue=True
        ),
    )

    # Yellow: (INT(H) <= INT(I)) OR (L > 39 AND H < I*1.31)
    ws.conditional_formatting.add(
        data_range,
        FormulaRule(
            formula=[
                f"AND(${E}{first_data_row}>0,OR(INT(${H}{first_data_row})<=INT(${I}{first_data_row}),AND(${L}{first_data_row}>{THR},${H}{first_data_row}<${I}{first_data_row}*1.31)))"],
            fill=yellow,
            stopIfTrue=True
        ),
    )

    # Red: (E > 0 AND H > I*1.3 AND L > 39) OR (E > 0 AND INT(H) > INT(I) AND L < 39)
    ws.conditional_formatting.add(
        data_range,
        FormulaRule(
            formula=[
                f"OR(AND(${E}{first_data_row}>0,${H}{first_data_row}>${I}{first_data_row}*1.3,${L}{first_data_row}>{THR}),AND(${E}{first_data_row}>0,INT(${H}{first_data_row})>INT(${I}{first_data_row}),${L}{first_data_row}<{THR}))"],
            fill=red,
            stopIfTrue=True
        ),
    )

    # --- Number format: 2 decimals for all numeric cells in data range
    # (–∫—Ä–∞—â–µ –∑ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–µ–º —Ç–∏—Å—è—á)
    num_fmt = "#,##0.00"
    for row in ws.iter_rows(
            min_row=first_data_row,
            max_row=last_data_row,
            min_col=1,
            max_col=ws.max_column
    ):
        for cell in row:
            cell.number_format = num_fmt


def ask_additional_table_with_skip(message: types.Message, state: UserState):
    offer = state.offers[state.current_offer_index]
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ–π –æ—Ñ–µ—Ä", callback_data="skip_offer"))
    bot.send_message(
        message.chat.id,
        (
            f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –æ—Ñ–µ—Ä—É:\n"
            f"<b>{offer}</b>\n\n"
            "–û—á—ñ–∫—É–≤–∞–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: <b>–ö—Ä–∞—ó–Ω–∞</b>, <b>–°—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤</b>.\n"
            "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ–π –æ—Ñ–µ—Ä¬ª, —â–æ–± –Ω–µ –≤–∫–ª—é—á–∞—Ç–∏ –π–æ–≥–æ —É —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç."
        ),
        reply_markup=kb,
    )


# ===================== ALLOCATION HELPERS =====================

def _classify_status(E: float, F: float, K: float) -> str:
    if E <= 0:
        return "Grey"
    H = 1.3 * F / E if E else float("inf")
    L = (100.0 * K) / (1.3 * F) if F else float("inf")

    # Green: E>0 and H<=9 and L>39.99
    green = (H <= H_THRESH + EPS) and (L > L_THRESH + EPS)
    if green:
        return "Green"

    # Yellow: E>0 and ((H<=9) or (L>39.99)) and not Green
    yellow = (H <= H_THRESH + EPS) or (L > L_THRESH + EPS)
    return "Yellow" if yellow else "Red"  # Red: H>9 and L<=39.99


def _fmt(v: float, suf: str = "", nan_text: str = "-") -> str:
    if not np.isfinite(v):
        return nan_text
    return f"{v:.2f}{suf}"


def build_allocation_explanation(df_source: pd.DataFrame,
                                 alloc_vec: pd.Series,
                                 budget: float,
                                 max_lines: int = 20) -> str:
    """
    –°—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç:
      - —Å–∫—ñ–ª—å–∫–∏ –±—é–¥–∂–µ—Ç—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —ñ –∑–∞–ª–∏—à–æ–∫
      - —Å–∫—ñ–ª—å–∫–∏ —Ä—è–¥–∫—ñ–≤ –∑–º—ñ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å, —Å–∫—ñ–ª—å–∫–∏ –∂–æ–≤—Ç–∏—Ö —É –ø—ñ–¥—Å—É–º–∫—É
      - —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-—Ä—è–¥–∫—ñ–≤ –∑ –∞–ª–æ–∫–∞—Ü—ñ—î—é (Offer ID / –ù–∞–∑–≤–∞ / –ì–ï–û, +—Å—É–º–∞, –Ω–æ–≤—ñ H —ñ L, —Å—Ç–∞—Ç—É—Å: –î–û ‚Üí –ü–Ü–°–õ–Ø)

    max_lines ‚Äî –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤ —É —Å–ø–∏—Å–∫—É (—â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —á–∞—Ç).
    """
    df = df_source.copy()
    # –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫
    df.columns = [str(c).replace("\xa0", " ").replace("\u00A0", " ").strip() for c in df.columns]

    # –í–∏—Ç—è–≥—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –∑ –¥–µ—Ñ–æ–ª—Ç–∞–º–∏, —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ
    subid = df.get("Subid", pd.Series([""] * len(df)))
    offer = df.get("Offer ID", df.get("–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É", pd.Series([""] * len(df))))
    name = df.get("–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É", pd.Series([""] * len(df)))
    geo = df.get("–ì–ï–û", pd.Series([""] * len(df)))
    E = pd.to_numeric(df.get("FTD qty", 0), errors="coerce").fillna(0.0)
    F = pd.to_numeric(df.get("Total spend", 0), errors="coerce").fillna(0.0)
    K = pd.to_numeric(df.get("Total Dep Amount", 0), errors="coerce").fillna(0.0)

    alloc = pd.to_numeric(alloc_vec, errors="coerce").reindex(df.index).fillna(0.0)
    F_new = (F + alloc)

    # –°—Ç–∞—Ç—É—Å–∏ –î–û/–ü–Ü–°–õ–Ø
    before = [_classify_status(float(E[i]), float(F[i]), float(K[i])) for i in df.index]
    after = [_classify_status(float(E[i]), float(F_new[i]), float(K[i])) for i in df.index]

    # –ú–µ—Ç—Ä–∏–∫–∏
    total_budget = float(budget)
    used = float(alloc.sum())
    left = max(0.0, total_budget - used)

    yellow_before = sum(1 for s in before if s == "Yellow")
    yellow_after = sum(1 for s in after if s == "Yellow")
    green_to_yellow = sum(1 for i in df.index if (before[i] == "Green" and after[i] == "Yellow"))

    # –ü–æ–±—É–¥–æ–≤–∞ —Å–ø–∏—Å–∫—É —Ä—è–¥–∫—ñ–≤ –∑ –∞–ª–æ–∫–∞—Ü—ñ—î—é
    rows = []
    for i in alloc.index:
        if alloc[i] <= 0:
            continue

        Ei = float(E[i]);
        Fi = float(F[i]);
        Ki = float(K[i]);
        Fni = float(F_new[i])

        # –î–û
        H_before = (1.3 * Fi / Ei) if Ei > 0 else float("inf")
        L_before = (100.0 * Ki) / (1.3 * Fi) if Fi > 0 else float("inf")

        # –ü–Ü–°–õ–Ø
        H_after = (1.3 * Fni / Ei) if Ei > 0 else float("inf")
        L_after = (100.0 * Ki) / (1.3 * Fni) if Fni > 0 else float("inf")

        line = (
            f"- {str(offer[i]) or ''} / {str(name[i]) or ''} / {str(geo[i]) or ''}: "
            f"+{alloc[i]:.2f} ‚Üí Total Spend {Fi:.2f}‚Üí{Fni:.2f}; "
            f"CPA {_fmt(H_before)}‚Üí{_fmt(H_after)}, "
            f"My deposit amount {_fmt(L_before, '%')}‚Üí{_fmt(L_after, '%')} | "
            f"{before[i]} ‚Üí {after[i]}"
        )
        rows.append((alloc[i], line))

    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∞–ª–æ–∫–∞—Ü—ñ—î—é —ñ –æ–±—Ä—ñ–∑–∞—î–º–æ
    rows.sort(key=lambda x: (-x[0], x[1]))
    detail_lines = [ln for _, ln in rows[:max_lines]]

    header = (
        f"–†–æ–∑–ø–æ–¥—ñ–ª –±—é–¥–∂–µ—Ç—É: {used:.2f} / {total_budget:.2f} –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ; –∑–∞–ª–∏—à–æ–∫ {left:.2f}\n"
        f"–ñ–æ–≤—Ç–∏—Ö –î–û/–ü–Ü–°–õ–Ø: {yellow_before} ‚Üí {yellow_after} (–∑–µ–ª.‚Üí–∂–æ–≤—Ç.: {green_to_yellow})"
    )

    if not detail_lines:
        return header + "\n\n(–ê–ª–æ–∫–∞—Ü—ñ—ó –ø–æ —Ä—è–¥–∫–∞—Ö –≤—ñ–¥—Å—É—Ç–Ω—ñ ‚Äî –±—é–¥–∂–µ—Ç –Ω–µ –±—É–ª–æ –∫—É–¥–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏.)"

    return header + "\n\n–¢–æ–ø —Ä–æ–∑–ø–æ–¥—ñ–ª—ñ–≤:\n" + "\n".join(detail_lines) + \
        ("\n\n‚Ä¶–°–ø–∏—Å–æ–∫ –æ–±—Ä—ñ–∑–∞–Ω–æ." if len(rows) > max_lines else "")


def allocate_with_openai(df: pd.DataFrame, rules_text: str, model: str | None = None) -> pd.DataFrame:
    """
    –ù–∞–¥—Å–∏–ª–∞—î —Ç–∞–±–ª–∏—Ü—é —ñ –ø—Ä–∞–≤–∏–ª–∞ –≤ OpenAI, –æ—Ç—Ä–∏–º—É—î –Ω–∞–∑–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω—É —Ç–∞–±–ª–∏—Ü—é.
    –ú–æ–¥–µ–ª—å –º–∞—î –ü–û–í–ï–†–ù–£–¢–ò CSV –∑ —Ç–∏–º–∏ –∂ –∫–æ–ª–æ–Ω–∫–∞–º–∏ + –∫–æ–ª–æ–Ω–∫–∞ NEW SPEND (–∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ target-–∫–æ–ª–æ–Ω–∫—É).
    """
    if df.empty:
        raise ValueError("–ü—É—Å—Ç–∞ —Ç–∞–±–ª–∏—Ü—è –¥–ª—è –∞–ª–æ–∫–∞—Ü—ñ—ó.")

    model = model or OPENAI_MODEL
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    # 1) –î—ñ–ª–∏–º–æ –≤–µ–ª–∏–∫–∏–π DF –Ω–∞ —á–∞–Ω–∫–∏
    chunks = _split_df_by_size(df)

    updated_chunks: list[pd.DataFrame] = []

    for idx, chunk in enumerate(chunks, start=1):
        csv_in = _df_to_csv(chunk)

        system_msg = (
            "You are a meticulous data allocator. "
            "Follow the given allocation rules exactly. "
            "Return ONLY a CSV table with the SAME columns as input, "
            f"and include a numeric column '{OPENAI_OUTPUT_COLUMN}' with the recomputed spend per row. "
            "Do not add extra commentary. Use dot as decimal separator."
        )

        user_msg = (
            "Rules:\n"
            f"{rules_text}\n\n"
            "Instructions:\n"
            f"- Input table is a CSV.\n"
            f"- Keep all original columns unchanged.\n"
            f"- Add or overwrite a column named '{OPENAI_OUTPUT_COLUMN}' with the new per-row allocation (number only).\n"
            "- Return ONLY the CSV (no explanations).\n\n"
            "Input CSV:\n"
            f"{csv_in}"
        )

        resp = client.chat.completions.create(
            model=model,
            temperature=0.0,
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg},
            ],
        )

        content = resp.choices[0].message.content or ""
        csv_out = _csv_from_text(content)

        # —á–∏—Ç–∞—î–º–æ –Ω–∞–∑–∞–¥ —É DF
        try:
            out_df = pd.read_csv(io.StringIO(csv_out))
        except Exception as e:
            raise RuntimeError(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ CSV –≤—ñ–¥ –º–æ–¥–µ–ª—ñ –Ω–∞ —á–∞–Ω–∫—É {idx}: {e}")

        # –±–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
        missing_cols = [c for c in chunk.columns if c not in out_df.columns]
        if missing_cols:
            raise RuntimeError(f"–ú–æ–¥–µ–ª—å –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –≤—Å—ñ –∫–æ–ª–æ–Ω–∫–∏ (—á–∞–Ω–∫ {idx}). –í—ñ–¥—Å—É—Ç–Ω—ñ: {missing_cols}")

        if OPENAI_OUTPUT_COLUMN not in out_df.columns:
            raise RuntimeError(f"–ú–æ–¥–µ–ª—å –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –∫–æ–ª–æ–Ω–∫—É '{OPENAI_OUTPUT_COLUMN}' (—á–∞–Ω–∫ {idx}).")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ä—è–¥–æ–∫ —Ä—è–¥–∫—ñ–≤: –ø—Ä–∏—î–¥–Ω–∞—î–º–æ –ø–æ —ñ–Ω–¥–µ–∫—Å—É
        # (–æ—á—ñ–∫—É—î—Ç—å—Å—è —Ç–æ–π —Å–∞–º–∏–π –ø–æ—Ä—è–¥–æ–∫ ‚Äî –∞–ª–µ –Ω–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫ –ø—Ä–∏–≤–µ–¥–µ–º–æ –¥–æ–≤–∂–∏–Ω–∏)
        if len(out_df) != len(chunk):
            # —è–∫ fallback ‚Äî –ø—ñ–¥—Ä—ñ–∑–∞—î–º–æ/–¥–æ–ø–æ–≤–Ω—é–≤–∞—Ç–∏ –Ω–µ –±—É–¥–µ–º–æ; –≤–≤–∞–∂–∞—î–º–æ –ø–æ–º–∏–ª–∫–æ—é
            raise RuntimeError(
                f"–†–æ–∑–º—ñ—Ä —á–∞–Ω–∫–∞ –∑–º—ñ–Ω–∏–≤—Å—è (–æ—á—ñ–∫—É–≤–∞–≤ {len(chunk)}, –æ—Ç—Ä–∏–º–∞–≤ {len(out_df)}) –Ω–∞ —á–∞–Ω–∫—É {idx}."
            )

        # –±–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–æ–Ω–∫—É –∑ –Ω–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ —ñ –∑–º–µ—Ä–¥–∂–∏–º–æ
        chunk[OPENAI_OUTPUT_COLUMN] = out_df[OPENAI_OUTPUT_COLUMN].values
        updated_chunks.append(chunk)

    # –∑–±–∏—Ä–∞—î–º–æ –Ω–∞–∑–∞–¥
    result = pd.concat(updated_chunks, axis=0)
    result.reset_index(drop=True, inplace=True)
    return result


def allocate_total_spend_alternative(
        df: pd.DataFrame,
        *,
        col_total_spend: str = "Total spend",      # F
        col_ftd_qty: str = "FTD qty",              # E
        col_cpa_target: str = "CPA Target",        # I
        col_my_deposit: str = "My deposit amount", # L (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ —Ñ–æ—Ä–º—É–ª–æ—é)
        col_total_dep_amount: str = "Total Dep Amount",  # K
        col_geo: str = "–ì–ï–û",
        in_place: bool = False,
        round_decimals: Optional[int] = 2,
        excel_path: Optional[str] = None,
        sheet_name: str = "Result",
        header_row: int = 1,  # —à–∞–ø–∫–∞ –≤ –ø–µ—Ä—à–æ–º—É —Ä—è–¥–∫—É
) -> pd.DataFrame:
    """
    Pass#1: —Ä–æ–∑–¥–∞—î–º–æ –ø—ñ–¥ "–∂–æ–≤—Ç–∏–π" –º–Ω–æ–∂–Ω–∏–∫ (–∑–∞ L —ñ–∑ –≤—Ö—ñ–¥–Ω–æ–≥–æ df).
    –ü—ñ—Å–ª—è Pass#1: –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ L = (K / (F*1.3)) * 100, –∑–Ω–∞—Ö–æ–¥–∏–º–æ —Ä—è–¥–∫–∏ –∑ L>THR,
      –¥–µ THR = 59 –¥–ª—è –ì–∞–±–æ–Ω—É —ñ 39 –¥–ª—è —ñ–Ω—à–∏—Ö,
      —Ä–∞—Ö—É—î–º–æ –¥–≤—ñ –º–µ–∂—ñ –¥–ª—è F:
        F_cap_deposit = (K/THR*100) * (100/130)
        F_cap_cpa     = (E*I*1.3) * (100/130)
      target_F = min(–¥–≤–æ—Ö –º–µ–∂).
      –Ø–∫—â–æ F < target_F ‚Äî –ø—ñ–¥–Ω—ñ–º–∞—î–º–æ F —É –º–µ–∂–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É.
      –Ø–∫—â–æ F > target_F ‚Äî –∑–º–µ–Ω—à—É—î–º–æ F —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é –≤ –±—é–¥–∂–µ—Ç.
    Pass#2: —è–∫—â–æ —â–µ —î –±—é–¥–∂–µ—Ç ‚Äî –ø—ñ–¥–Ω—ñ–º–∞—î–º–æ F –¥–æ "—á–µ—Ä–≤–æ–Ω–æ—ó" —Å—Ç–µ–ª—ñ: F_red = (E*I*1.8)*(100/130)
    """

    work = df if in_place else df.copy()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
    for c in (col_total_spend, col_ftd_qty, col_cpa_target, col_my_deposit, col_total_dep_amount):
        if c not in work.columns:
            raise KeyError(f"–í—ñ–¥—Å—É—Ç–Ω—è –∫–æ–ª–æ–Ω–∫–∞: {c}")
    if col_geo not in work.columns:
        raise KeyError(f"–í—ñ–¥—Å—É—Ç–Ω—è –∫–æ–ª–æ–Ω–∫–∞ –∑ –ì–ï–û: {col_geo}")

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤
    for c in (col_total_spend, col_ftd_qty, col_cpa_target, col_my_deposit, col_total_dep_amount):
        work[c] = pd.to_numeric(work[c], errors="coerce").fillna(0.0)

    # –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –ì–ï–û —ñ –ø–æ—Ä—ñ–≥ L: 59 –¥–ª—è –ì–∞–±–æ–Ω—É, 39 –¥–ª—è —ñ–Ω—à–∏—Ö
    geo_norm = work[col_geo].astype(str).str.strip().fillna("")
    L_threshold_series = np.where(geo_norm.eq("–ì–∞–±–æ–Ω"), 59.0, 39.0)

    # –ö–ª—ñ–ø–∏
    work[col_ftd_qty] = work[col_ftd_qty].clip(lower=0)
    work[col_cpa_target] = work[col_cpa_target].clip(lower=0)
    work[col_my_deposit] = work[col_my_deposit].clip(lower=0)
    work[col_total_dep_amount] = work[col_total_dep_amount].clip(lower=0)

    mask_take = work[col_ftd_qty] > 0

    # –ë—é–¥–∂–µ—Ç = —Å—É–º–∞ —Å—Ç–∞—Ä–∏—Ö F –ø–æ E>0
    budget = float(work.loc[mask_take, col_total_spend].sum())
    if budget < 0:
        budget = 0.0
    print("Initial budget:", budget)

    # –û–±–Ω—É–ª—è—î–º–æ F
    work[col_total_spend] = 0.0

    # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏
    CONV = 100.0 / 130.0  # == 1/1.3
    MULT_Y_HIGH = 1.3     # –¥–ª—è L>=THR —É Pass#1
    MULT_Y_LOW  = 1.1     # –¥–ª—è L<THR  —É Pass#1
    MULT_CPA_Y  = 1.3     # "–∂–æ–≤—Ç–∞" CPA –º–µ–∂–∞
    MULT_RED    = 1.8     # "—á–µ—Ä–≤–æ–Ω–∞" —Å—Ç–µ–ª—è –¥–ª—è Pass#2

    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ L —ñ–∑ –í–•–Ü–î–ù–û–ì–û df –¥–ª—è –≤–∏–±–æ—Ä—É –º–Ω–æ–∂–Ω–∏–∫–∞ –≤ Pass#1
    L_for_threshold = pd.to_numeric(df[col_my_deposit], errors="coerce").fillna(0.0).clip(lower=0)

    # -------- Pass#1: –¥–æ "–∂–æ–≤—Ç–æ–≥–æ" --------
    idx_pass1 = work.loc[mask_take].sort_values(by=col_ftd_qty, ascending=True).index

    for i in idx_pass1:
        if budget <= 0:
            break
        E = float(work.at[i, col_ftd_qty])
        I = float(work.at[i, col_cpa_target])
        Lthr_val = float(L_for_threshold.at[i])
        thr_i = float(L_threshold_series[work.index.get_loc(i)])  # 59 –¥–ª—è –ì–∞–±–æ–Ω—É, 39 —ñ–Ω–∞–∫—à–µ

        mult = MULT_Y_HIGH if Lthr_val >= thr_i else MULT_Y_LOW
        target_F = E * I * mult * CONV  # == (E * I * mult)/1.3

        alloc = min(target_F, budget)
        work.at[i, col_total_spend] = alloc
        budget -= alloc

    # -------- –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ L —Ç–∞ "–ø—ñ–¥–Ω—è—Ç—Ç—è/–∑–º–µ–Ω—à–µ–Ω–Ω—è" F –¥–ª—è L>THR --------
    # L_now = (K / (F*1.3)) * 100
    G_now = work[col_total_spend] * 1.3
    with np.errstate(divide='ignore', invalid='ignore'):
        L_now = np.where(G_now > 0, (work[col_total_dep_amount] / G_now) * 100.0, np.inf)
    work[col_my_deposit] = L_now  # –∑–∞–ø–∏—Å–∞—Ç–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç—ñ

    # –ú–∞—Å–∫–∞ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è: E>0 —ñ L_now > THR(geo)
    mask_adjust = mask_take.values & (L_now > L_threshold_series)

    if mask_adjust.any():
        # –î–µ–ø–æ–∑–∏—Ç–Ω–∞ –≤–µ—Ä—Ö–Ω—è –º–µ–∂–∞: F_cap_dep = (K/THR*100) * CONV
        F_cap_dep = (work[col_total_dep_amount].values / L_threshold_series * 100.0) * CONV
        # CPA –º–µ–∂–∞: F_cap_cpa = (E * I * 1.3) * CONV
        F_cap_cpa = (work[col_ftd_qty].values * work[col_cpa_target].values * MULT_CPA_Y) * CONV

        # –¶—ñ–ª—å–æ–≤–∏–π F ‚Äî –º—ñ–Ω—ñ–º—É–º –¥–≤–æ—Ö –≤–µ—Ä—Ö–Ω—ñ—Ö –º–µ–∂
        F_target = np.minimum(F_cap_dep, F_cap_cpa)

        curF = work[col_total_spend].values
        tgtF = F_target
        adj  = mask_adjust

        delta = np.zeros_like(curF, dtype=float)

        # –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–Ω—è—Ç–∏ (consume budget)
        need_up_mask = adj & (tgtF > curF)
        delta_up = tgtF - curF
        need_up_total = float(delta_up[need_up_mask].sum())

        if need_up_total > 0 and budget > 0:
            # –Ø–∫—â–æ –±—é–¥–∂–µ—Ç—É –º–∞–ª–æ ‚Äî –ø—ñ–¥–Ω—ñ–º–∞—î–º–æ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ
            ratio = min(1.0, budget / need_up_total)
            inc = np.zeros_like(curF, dtype=float)
            inc[need_up_mask] = delta_up[need_up_mask] * ratio
            curF += inc
            budget -= float(inc.sum())

        # –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–º–µ–Ω—à–∏—Ç–∏ (free budget)
        need_down_mask = adj & (tgtF < curF)
        freed = float((curF[need_down_mask] - tgtF[need_down_mask]).sum())
        if freed > 0:
            curF[need_down_mask] = tgtF[need_down_mask]
            budget += freed

        work[col_total_spend] = curF
        print(f"[Adjust L>THR] budget after adjust: {budget:.2f}")

        # –û–Ω–æ–≤–∏–º–æ L –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ F (—â–æ–± –±–∞—á–∏—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è)
        G_now = work[col_total_spend] * 1.3
        with np.errstate(divide='ignore', invalid='ignore'):
            L_now = np.where(G_now > 0, (work[col_total_dep_amount] / G_now) * 100.0, np.inf)
        work[col_my_deposit] = L_now

    # -------- Pass#2: –¥–æ "—á–µ—Ä–≤–æ–Ω–æ—ó" —Å—Ç–µ–ª—ñ --------
    if budget > 0:
        idx_pass2 = work.loc[mask_take].sort_values(by=col_total_spend, ascending=True).index
        for i in idx_pass2:
            if budget <= 0:
                break
            E = float(work.at[i, col_ftd_qty])
            I = float(work.at[i, col_cpa_target])

            red_cap = E * I * MULT_RED * CONV  # –≤–µ—Ä—Ö–Ω—è –º–µ–∂–∞ F
            cur_F = float(work.at[i, col_total_spend])

            need = max(0.0, red_cap - cur_F)
            if need <= 0:
                continue

            add = min(need, budget)
            work.at[i, col_total_spend] = cur_F + add
            budget -= add

    # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è
    if round_decimals is not None:
        work[col_total_spend] = work[col_total_spend].round(round_decimals)

    if excel_path:
        # –ó–∞–ø–∏—Å —É —Ñ–∞–π–ª/–∞—Ä–∫—É—à
        with ExcelWriter(excel_path, engine="openpyxl", mode="w") as writer:
            work.to_excel(writer, sheet_name=sheet_name, index=False)
            ws = writer.book[sheet_name]
            first_data_row = header_row + 1
            last_data_row = header_row + len(work)
            inject_formulas_and_cf(
                ws,
                header_row=header_row,
                first_data_row=first_data_row,
                last_data_row=last_data_row,
            )
            writer._save()

    return work


def compute_optimal_allocation(df: pd.DataFrame, budget: float) -> Tuple[pd.DataFrame, str, pd.Series]:
    """
    –ù–æ–≤–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å:
      A) –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ GREEN -> YELLOW (–¥–æ—Ç—Ä–∏–º—É—é—á–∏—Å—å CPA<=CPA_CAP).
      B) –Ø–∫—â–æ –∑–∞–ª–∏—à–∏–≤—Å—è –±—é–¥–∂–µ—Ç ‚Äî –Ω–∞—Å–∏—á—É—î–º–æ YELLOW –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ, –∞–ª–µ —Ç–∞–∫, —â–æ–± –≤–æ–Ω–∏ –∑–∞–ª–∏—à–∞–ª–∏—Å—å YELLOW (—ñ CPA<=CPA_CAP).

    –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è:
      E = FTD qty
      F = Total spend
      K = Total Dep Amount

    –ú–µ–∂—ñ/–ø–æ—Ö—ñ–¥–Ω—ñ:
      F_at_H = H_THRESH * E / 1.3
      F_at_L = (100 * K) / (1.3 * L_THRESH)  # L == L_THRESH –ø—Ä–∏ —Ç–∞–∫–æ–º—É F
      F_cap  = CPA_CAP * E / 1.3
    """
    dfw = df.copy()

    # –ß–∏—Å–ª–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏
    E = pd.to_numeric(dfw["FTD qty"], errors="coerce").fillna(0.0)
    F = pd.to_numeric(dfw["Total spend"], errors="coerce").fillna(0.0)
    K = pd.to_numeric(dfw["Total Dep Amount"], errors="coerce").fillna(0.0)

    # –ü–æ—Ç–æ—á–Ω—ñ H, L
    with np.errstate(divide='ignore', invalid='ignore'):
        H = 1.3 * F / E.replace(0, np.nan)
        L = 100.0 * K / (1.3 * F.replace(0, np.nan))

    # –ú–µ–∂—ñ
    F_at_H = H_THRESH * E / 1.3
    F_at_L = (100.0 * K) / (1.3 * L_THRESH)
    F_cap = CPA_CAP * E / 1.3

    # –ú–∞—Å–∫–∏ —Å—Ç–∞—Ç—É—Å—ñ–≤ (—Å—Ç—Ä–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø—Ä–∞–≤–∏–ª/Excel)
    grey_mask = (E <= 0)
    green_mask = (~grey_mask) & (H <= H_THRESH + EPS) & (L > L_THRESH + EPS)
    yellow_mask = (~grey_mask) & ((H <= H_THRESH + EPS) | (L > L_THRESH + EPS)) & (~green_mask)
    # red_mask   = (~grey_mask) & (~green_mask) & (~yellow_mask)  # –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω —è–≤–Ω–æ

    alloc = pd.Series(0.0, index=dfw.index, dtype=float)
    rem = float(budget) if budget and budget > 0 else 0.0

    # -------------------------------
    # A) GREEN -> YELLOW (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π spend)
    # -------------------------------
    # –ö–∞–Ω–¥–∏–¥–∞—Ç–∏ —Ü—ñ–ª—å–æ–≤–∏—Ö F:
    #   - –ø–µ—Ä–µ—Ç–Ω—É—Ç–∏ –º–µ–∂—É H: F_cross_H = F_at_H + EPS_YEL (—Ä–æ–±–∏—Ç—å H —Ç—Ä–æ—Ö–∏ > H_THRESH)
    #   - –ø–µ—Ä–µ—Ç–Ω—É—Ç–∏ –º–µ–∂—É L: F_cross_L = F_at_L + EPS_YEL (—Ä–æ–±–∏—Ç—å L —Ç—Ä–æ—Ö–∏ < L_THRESH)
    F_cross_H = F_at_H + EPS_YEL
    F_cross_L = F_at_L + EPS_YEL

    # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π F, —è–∫–∏–π –∑–ª–∞–º–∞–≤ "–∑–µ–ª–µ–Ω—ñ—Å—Ç—å", –∞–ª–µ –Ω–µ —Ä–æ–±–∏—Ç—å —Ä—è–¥–æ–∫ "—á–µ—Ä–≤–æ–Ω–∏–º" —ñ –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î CPA cap.
    candidates = pd.DataFrame({
        "F_now": F,
        "F_cap": F_cap,
        "F_cross_H": F_cross_H,
        "F_cross_L": F_cross_L,
        "E": E,
        "K": K
    })

    # –î–ª—è –∫–æ–∂–Ω–æ–≥–æ green –æ–±—á–∏—Å–ª—é—î–º–æ –Ω–∞–π–º–µ–Ω—à—É –¥–æ–ø—É—Å—Ç–∏–º—É —Ü—ñ–ª—å F_target
    F_target = F.copy()

    for i in candidates[green_mask].index:
        Fi = float(candidates.at[i, "F_now"])
        Fcap = float(candidates.at[i, "F_cap"])
        Fh = float(candidates.at[i, "F_cross_H"])
        Fl = float(candidates.at[i, "F_cross_L"])
        Ei = float(E.at[i])
        Ki = float(K.at[i])

        # –û–±–∏–¥–≤–∞ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ —Ü—ñ–ª—ñ –≤ –º–µ–∂–∞—Ö CPA?
        options = []
        for Ft in (Fh, Fl):
            if np.isfinite(Ft) and Ft > Fi + EPS and Ft <= Fcap + EPS:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —â–æ Ft –Ω–µ —Ä–æ–±–∏—Ç—å —Ä—è–¥–æ–∫ "—á–µ—Ä–≤–æ–Ω–∏–º"
                Ht = 1.3 * Ft / Ei if Ei > 0 else float("inf")
                Lt = (100.0 * Ki) / (1.3 * Ft) if Ft > 0 else float("inf")
                is_red = (Ht > H_THRESH + EPS) and (Lt <= L_THRESH + EPS)
                if not is_red:
                    options.append(Ft)

        if options:
            F_target.at[i] = min(options)  # –Ω–∞–π–º–µ–Ω—à–∞ —Ü—ñ–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥—É
        else:
            # –Ω–µ–º–æ–∂–ª–∏–≤–æ –ª–µ–≥–∞–ª—å–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –∂–æ–≤—Ç–∏–º ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î
            F_target.at[i] = Fi

    need_delta = (F_target - F).clip(lower=0.0)

    # –†–æ–∑–ø–æ–¥—ñ–ª: –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó –¥–µ–ª—å—Ç–∏
    for i in need_delta[green_mask].sort_values(ascending=True).index:
        if rem <= 1e-9:
            break
        need = float(need_delta.at[i])
        if need <= 0:
            continue
        take = min(rem, need)
        alloc.at[i] += take
        rem -= take

    # -------------------------------
    # B) –ù–∞—Å–∏—á–µ–Ω–Ω—è YELLOW, —â–æ–± –ª–∏—à–∞–ª–∏—Å—å YELLOW (CPA<=cap)
    # -------------------------------
    if rem > 1e-9:
        # –ü–µ—Ä–µ—Ä–∞—Ö—É–≤–∞—Ç–∏ F –ø—ñ—Å–ª—è –∫—Ä–æ–∫—É A
        F_mid = F + alloc
        with np.errstate(divide='ignore', invalid='ignore'):
            H_mid = 1.3 * F_mid / E.replace(0, np.nan)
            L_mid = 100.0 * K / (1.3 * F_mid.replace(0, np.nan))

        # –¢—ñ, —Ö—Ç–æ –∑–∞—Ä–∞–∑ –∂–æ–≤—Ç—ñ (–≤–∫–ª—é—á–Ω–æ –∑ –Ω–æ–≤–∏–º–∏ –∑ –∫—Ä–æ–∫—É A)
        is_green_mid = (~(E <= 0)) & (H_mid <= H_THRESH + EPS) & (L_mid > L_THRESH + EPS)
        is_yellow_mid = (~(E <= 0)) & (((H_mid <= H_THRESH + EPS) | (L_mid > L_THRESH + EPS)) & (~is_green_mid))

        # –ú–µ–∂–∞ "–∑–∞–ª–∏—à–∏—Ç–∏—Å—å –∂–æ–≤—Ç–∏–º": –¥–æ max(F_at_H, F_at_L - EPS_YEL), —Ç–∞ —â–µ –π –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ cap
        F_yellow_limit_base = pd.Series(np.maximum(F_at_H, F_at_L - EPS_YEL), index=dfw.index)
        F_yellow_limit_final = pd.Series(np.minimum(F_yellow_limit_base, F_cap), index=dfw.index).fillna(0.0)

        headroom = (F_yellow_limit_final - F_mid).clip(lower=0.0)

        # Greedy –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º headroom
        for i in headroom[is_yellow_mid].sort_values(ascending=False).index:
            if rem <= 1e-9:
                break
            give = float(min(rem, headroom.at[i]))
            if give <= 0:
                continue
            alloc.at[i] += give
            rem -= give

    # –ü–Ü–î–°–£–ú–û–ö
    F_final = F + alloc
    with np.errstate(divide='ignore', invalid='ignore'):
        H_final = 1.3 * F_final / E.replace(0, np.nan)
        L_final = 100.0 * K / (1.3 * F_final.replace(0, np.nan))

    still_green = (E > 0) & (H_final <= H_THRESH + EPS) & (L_final > L_THRESH + EPS)
    still_yellow = (E > 0) & (((H_final <= H_THRESH + EPS) | (L_final > L_THRESH + EPS)) & (~still_green))

    kept_yellow = int(still_yellow.sum())
    total_posE = int((E > 0).sum())

    dfw["Allocated extra"] = alloc
    dfw["New Total spend"] = F_final
    dfw["Will be yellow"] = ["Yes" if x else "No" for x in still_yellow]

    summary = (
        f"–ë—é–¥–∂–µ—Ç: {budget:.2f}\n"
        f"–ñ–æ–≤—Ç–∏—Ö –ø—ñ—Å–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É: {kept_yellow}/{total_posE}\n"
        f"–ü—Ä–∞–≤–∏–ª–∞: —Å–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –∑–µ–ª–µ–Ω—ñ –≤ –∂–æ–≤—Ç—ñ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º spend (CPA‚â§{CPA_CAP:g}), "
        f"–ø–æ—Ç—ñ–º –Ω–∞—Å–∏—á—É—î–º–æ –∂–æ–≤—Ç—ñ –≤ –º–µ–∂–∞—Ö –∂–æ–≤—Ç–æ–≥–æ (H‚â§{H_THRESH:g} –∞–±–æ L>{L_THRESH:.2f}, CPA‚â§{CPA_CAP:g})."
    )
    return dfw, summary, alloc


def write_result_like_excel_with_new_spend(bio: io.BytesIO, df_source: pd.DataFrame, new_total_spend: pd.Series):
    """
    Build an Excel sheet identical to result.xlsx structure:
    Columns (A..P):
      A Subid | B Offer ID | C –ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É | D –ì–ï–û | E FTD qty | F Total spend | G Total+% | H CPA | I CPA Target |
      J –°P/–ß | K Total Dep Amount | L My deposit amount | M C. profit Target 40% | N C. profit Target 50% | O CAP | P –û—Å—Ç–∞—Ç–æ–∫ CAP
    Uses new_total_spend for column F, then writes the same formulas, formats and conditional formatting.
    """
    final_cols = [
        "Subid", "Offer ID", "–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É", "–ì–ï–û",
        "FTD qty", "Total spend", "Total+%", "CPA", "CPA Target", "–°P/–ß",
        "Total Dep Amount", "My deposit amount", "C. profit Target 40%", "C. profit Target 50%",
        "CAP", "–û—Å—Ç–∞—Ç–æ–∫ CAP"
    ]

    # Start from source, ensure all columns exist
    df_out = df_source.copy()
    # normalize column names just in case
    df_out.columns = [str(c).replace("\xa0", " ").replace("\u00A0", " ").strip() for c in df_out.columns]

    # Coerce numbers
    df_out["FTD qty"] = pd.to_numeric(df_out.get("FTD qty", 0), errors="coerce").fillna(0)
    df_out["Total spend"] = pd.to_numeric(df_out.get("Total spend", 0), errors="coerce").fillna(0.0)
    df_out["Total Dep Amount"] = pd.to_numeric(df_out.get("Total Dep Amount", 0.0), errors="coerce").fillna(0.0)

    # Apply new spend
    # align by index; if shapes don't match, reindex new_total_spend to df_out
    new_total_spend = pd.to_numeric(new_total_spend, errors="coerce").fillna(0.0)
    new_total_spend = new_total_spend.reindex(df_out.index).fillna(0.0)
    df_out["Total spend"] = (df_out["Total spend"] + new_total_spend).round(2)

    # Ensure missing columns exist as blanks
    for col in final_cols:
        if col not in df_out.columns:
            df_out[col] = ""

    # Reorder
    df_out = df_out[final_cols].copy()

    # Round numeric display columns
    df_out["FTD qty"] = pd.to_numeric(df_out["FTD qty"], errors="coerce").fillna(0).astype(int)
    for col in ["Total spend", "Total Dep Amount"]:
        df_out[col] = pd.to_numeric(df_out[col], errors="coerce").round(2)

    with pd.ExcelWriter(bio, engine="openpyxl") as writer:
        df_out.to_excel(writer, index=False, sheet_name="Result")
        wb = writer.book
        ws = writer.sheets["Result"]

        from openpyxl.styles import PatternFill, Alignment, Font
        from openpyxl.formatting.rule import FormulaRule

        first_row = 2
        last_row = ws.max_row

        # Re-insert formulas (same as send_final_table)
        for r in range(first_row, last_row + 1):
            ws[f"G{r}"].value = f"=F{r}*1.3"  # Total+%
            ws[f"H{r}"].value = f"=IFERROR(G{r}/E{r},\"\")"  # CPA
            ws[f"I{r}"].value = cpa_target_for_geo(ws[f"D{r}"].value)  # CPA Target
            ws[f"J{r}"].value = f"=IFERROR(K{r}/E{r},\"\")"  # –°P/–ß
            ws[f"L{r}"].value = f"=IFERROR(K{r}/G{r}*100,0)"  # My deposit amount
            ws[f"M{r}"].value = f"=G{r}*0.4"  # Profit 40%
            ws[f"N{r}"].value = f"=G{r}*0.5"  # Profit 50%

        # Header styling
        for col in range(1, 17):  # A..P
            ws.cell(row=1, column=col).font = Font(bold=True)
            ws.cell(row=1, column=col).alignment = Alignment(horizontal="center")

        # Widths
        widths = {"A": 10, "B": 12, "C": 22, "D": 16, "E": 10, "F": 14, "G": 12, "H": 10, "I": 12, "J": 10, "K": 16,
                  "L": 18, "M": 18, "N": 18, "O": 12, "P": 16}
        for col, w in widths.items():
            ws.column_dimensions[col].width = w

        # Number formats (2 decimals for F,G,H,J,K,L,M,N; E as integer)
        for r in range(first_row, last_row + 1):
            ws[f"E{r}"].number_format = "0"
        two_dec_cols = ["F", "G", "H", "J", "K", "L", "M", "N"]
        for col in two_dec_cols:
            for r in range(first_row, last_row + 1):
                ws[f"{col}{r}"].number_format = "0.00"

        # Conditional formatting ‚Äî SAME rules/colors
        data_range = f"A{first_row}:P{last_row}"
        grey = PatternFill("solid", fgColor="BFBFBF")
        green = PatternFill("solid", fgColor="C6EFCE")
        yellow = PatternFill("solid", fgColor="FFEB9C")
        red = PatternFill("solid", fgColor="FFC7CE")

        THR2 = 'IF($D2="–ì–∞–±–æ–Ω",59,39)'

        # Grey: E = 0
        ws.conditional_formatting.add(
            data_range,
            FormulaRule(formula=["$E2=0"], fill=grey, stopIfTrue=True)
        )

        # Green: INT(H) <= INT(I) AND L > 39
        ws.conditional_formatting.add(
            data_range,
            FormulaRule(formula=[f"AND($E2>0,INT($H2)<=INT($I2),$L2>{THR2})"], fill=green, stopIfTrue=True)
        )

        # Yellow: (INT(H) <= INT(I)) OR (L > 39 AND H < I*1.31)
        ws.conditional_formatting.add(
            data_range,
            FormulaRule(formula=[f"AND($E2>0,OR(INT($H2)<=INT($I2),AND($L2>{THR2},$H2<$I2*1.31)))"], fill=yellow,
                        stopIfTrue=True)
        )

        # Red: (E > 0 AND H > I*1.3 AND L > 39) OR (E > 0 AND INT(H) > INT(I) AND L < 39)
        ws.conditional_formatting.add(
            data_range,
            FormulaRule(
                formula=[f"OR(AND($E2>0,$H2>$I2*1.3,$L2>{THR2}),AND($E2>0,INT($H2)>INT($I2),$L2<{THR2}))"],
                fill=red,
                stopIfTrue=True
            )
        )


# ===================== BOT HANDLERS =====================

@bot.message_handler(commands=["start", "help"])
@require_access
def start(message: types.Message):
    chat_id = message.chat.id
    user_states[chat_id] = UserState()
    bot.reply_to(
        message,
        (
            "–ü—Ä–∏–≤—ñ—Ç! üëã\n\n"
            "1) –ù–∞–¥—ñ—à–ª–∏ <b>–≥–æ–ª–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é</b> (CSV/XLSX) ‚Äî –∞—Ä–∫—É—à <b>BUDG</b> –∑ –∫–æ–ª–æ–Ω–∫–∞–º–∏: <b>–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É</b>, <b>–ì–ï–û</b>, <b>–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏</b>.\n"
            "2) –ë–æ—Ç –ø—ñ–¥—Å—É–º—É—î –≤–∏—Ç—Ä–∞—Ç–∏ –ø–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø–∞—Ä–∞—Ö <b>Offer ID+–ì–ï–û</b> —ñ –≤–∏–∑–Ω–∞—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö <b>–ù–∞–∑–≤ –û—Ñ—Ñ–µ—Ä—É</b>.\n"
            "3) –ü–æ—Ç—ñ–º –ù–ê –ö–û–ñ–ù–£ <b>–ù–∞–∑–≤—É –û—Ñ—Ñ–µ—Ä—É</b> –Ω–∞–¥—ñ—à–ª–∏ –æ–¥–Ω—É –¥–æ–¥–∞—Ç–∫–æ–≤—É —Ç–∞–±–ª–∏—Ü—é (–≤ –Ω—ñ–π —î –≤—Å—ñ –∫—Ä–∞—ó–Ω–∏ –¥–ª—è —Ü—å–æ–≥–æ –æ—Ñ–µ—Ä–∞) –∑ –∫–æ–ª–æ–Ω–∫–∞–º–∏: <b>–ö—Ä–∞—ó–Ω–∞</b>, <b>–°—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤</b>.\n"
            "4) –§—ñ–Ω–∞–ª: Excel –∑ –∫–æ–ª–æ–Ω–∫–∞–º–∏: –ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É, –ì–ï–û, Total Spend, Total Dep Sum, Total Dep Amount.\n"
            "–ù–∞–¥—ñ—à–ª–∏ –∑–∞—Ä–∞–∑ –≥–æ–ª–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é."
        ),
    )


@bot.message_handler(content_types=["document"])
@require_access
def on_document(message: types.Message):
    chat_id = message.chat.id
    state = user_states.setdefault(chat_id, UserState())

    try:
        file_info = bot.get_file(message.document.file_id)
        file_bytes = bot.download_file(file_info.file_path)
        filename = message.document.file_name or "uploaded"
    except Exception as e:
        bot.reply_to(message, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª: <code>{e}</code>", parse_mode="HTML")
        return

    try:
        if state.phase == "WAIT_MAIN":
            df = load_main_budg_table(file_bytes, filename=filename)
            bot.reply_to(message, "‚úÖ –ì–æ–ª–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ.")
            handle_main_table(message, state, df)

        elif state.phase == "WAIT_ADDITIONAL":
            df = read_additional_table(file_bytes, filename)
            handle_additional_table(message, state, df)

        elif state.phase == "WAIT_ALLOC_RESULT":
            # —á–∏—Ç–∞—î–º–æ result.xlsx
            bio = io.BytesIO(file_bytes)
            try:
                df_res = pd.read_excel(bio, sheet_name="Result", engine="openpyxl")
            except Exception:
                bio.seek(0)
                df_res = pd.read_excel(bio, engine="openpyxl")

            # –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–∑–≤–∏
            df_res.columns = [str(c).replace("\xa0", " ").replace("\u00A0", " ").strip() for c in df_res.columns]

            # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –Ω–∞–±—ñ—Ä, –≤—ñ–¥ —è–∫–æ–≥–æ —Ä–∞—Ö—É—î–º–æ
            required_cols = ["FTD qty", "Total spend", "Total Dep Amount"]
            missing = [c for c in required_cols if c not in df_res.columns]
            if missing:
                raise ValueError("–£ result.xlsx –±—Ä–∞–∫—É—î –∫–æ–ª–æ–Ω–æ–∫: " + ", ".join(missing))

            # —á–∏—Å–ª–∞
            for num_col in ["FTD qty", "Total spend", "Total Dep Amount"]:
                df_res[num_col] = pd.to_numeric(df_res[num_col], errors="coerce").fillna(0)

            # --- –ì–Ü–õ–ö–ê –î–õ–Ø OpenAI: –±–µ–∑ –±—é–¥–∂–µ—Ç—É ---
            if getattr(state, "alloc_mode", None) == "openai":
                try:
                    base_rules = globals().get("OPENAI_RULES", """
                        1) –û–±—á–∏—Å–ª–∏ –∫–æ–ª–æ–Ω–∫—É 'New Spend' –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∞–ª–æ–∫–∞—Ü—ñ—ó:
                           - –Ø–∫—â–æ FTD=0 ‚Äî New Spend=0.
                           - –ñ–æ–≤—Ç–∏–π –ø–æ—Ä—ñ–≥: FTD * CPA_target * 1.3 (—è–∫—â–æ —î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø–æ–ª—è).
                           - –Ø–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ MyDeposit —ñ Total+% ‚Äî –¥–æ–¥–∞—Ç–∫–æ–≤–µ –æ–±–º–µ–∂–µ–Ω–Ω—è: MyDeposit * 100 / (Total+%).
                           - –Ø–∫—â–æ –ø—ñ—Å–ª—è —Ä–æ–∑–¥–∞—á—ñ –ø–æ –∂–æ–≤—Ç–æ–º—É –ª–∏—à–∞—î—Ç—å—Å—è –±—é–¥–∂–µ—Ç ‚Äî –¥–æ–∑–∞–ª–∏–π –¥–æ —á–µ—Ä–≤–æ–Ω–æ–≥–æ –ø–æ—Ä–æ–≥—É: FTD * CPA_target * 1.8 —É –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è Total+%.
                        2) –ù–µ –∑–º—ñ–Ω—é–π —ñ–Ω—à—ñ –∫–æ–ª–æ–Ω–∫–∏. –ü–æ–≤–µ—Ä–Ω–∏ —Ç–æ–π —Å–∞–º–∏–π –Ω–∞–±—ñ—Ä –∫–æ–ª–æ–Ω–æ–∫ + 'New Spend'.
                        3) –í—ñ–¥–ø–æ–≤—ñ–¥—å ‚Äî –¢–Ü–õ–¨–ö–ò CSV –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å. –î–µ—Å—è—Ç–∫–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ ‚Äî –∫—Ä–∞–ø–∫–∞.
                    """).strip()

                    # —è–∫—â–æ —Ö–æ—á–µ—à, –º–æ–∂–µ—à –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ TOTAL_BUDGET —Ç—É—Ç —Ç–µ–∂ ‚Äî –∞–±–æ –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏
                    rules_text = base_rules

                    out_df = allocate_with_openai(df_res, rules_text)

                    out = io.BytesIO()
                    with pd.ExcelWriter(out, engine="xlsxwriter") as writer:
                        out_df.to_excel(writer, index=False, sheet_name="Result")
                    out.seek(0)

                    bot.send_document(
                        chat_id,
                        out,
                        visible_file_name="allocation_openai.xlsx",
                        caption="–ì–æ—Ç–æ–≤–æ: –∞–ª–æ–∫–∞—Ü—ñ—è —á–µ—Ä–µ–∑ OpenAI"
                    )
                except Exception as e:
                    bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∞–ª–æ–∫–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ OpenAI: <code>{e}</code>", parse_mode="HTML")
                finally:
                    state.phase = "WAIT_MAIN"
                return

            # --- –õ–û–ö–ê–õ–¨–ù–Ü —Ä–µ–∂–∏–º–∏: –ø—Ä–æ—Å–∏–º–æ –±—é–¥–∂–µ—Ç ---
            if state.alloc_mode == "alternative":
                out_df = allocate_total_spend_alternative(
                    df_res,
                    col_total_spend="Total spend",
                    col_ftd_qty="FTD qty",
                    col_cpa_target="CPA Target",
                    col_my_deposit="My deposit amount",
                    col_total_dep_amount="Total Dep Amount",
                    excel_path="Result.xlsx",  # —Ñ–∞–π–ª –∑ —Ñ–æ—Ä–º—É–ª–∞–º–∏ + CF
                    sheet_name="Result",
                    header_row=1,
                )

                # ‚¨áÔ∏è –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–∞–º–µ —Ñ–∞–π–ª, –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤–∏—â–µ
                try:
                    with open("Result.xlsx", "rb") as f:
                        bot.send_document(
                            chat_id,
                            f,
                            visible_file_name="allocation_alternative.xlsx",  # –Ω–∞–∑–≤—É –º–æ–∂–µ—à –ª–∏—à–∏—Ç–∏ —è–∫ —Ö–æ—á–µ—à
                            caption="–ì–æ—Ç–æ–≤–æ: –∞–ª–æ–∫–∞—Ü—ñ—è –∑–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–º —Ä–µ–∂–∏–º–æ–º (–∑ —Ñ–æ—Ä–º—É–ª–∞–º–∏ —Ç–∞ –ø—ñ–¥—Å–≤—ñ—Ç–∫–æ—é)"
                        )
                except Exception as e:
                    bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ Excel: <code>{e}</code>", parse_mode="HTML")

                state.phase = "WAIT_MAIN"
                return
            else:
                state.alloc_df = df_res
                state.phase = "WAIT_ALLOC_BUDGET"
                bot.reply_to(message, "‚úÖ –§–∞–π–ª Result –ø—Ä–∏–π–Ω—è—Ç–æ. –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –±—é–¥–∂–µ—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 200).")

        else:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ —Ñ–∞–∑–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —ñ–∑ –≥–æ–ª–æ–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.")

    except ValueError as ve:
        bot.reply_to(
            message,
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–∞–π–ª—ñ <b>{filename}</b>:\n<code>{ve}</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>", parse_mode="HTML")


@bot.message_handler(commands=["allocate"])
@require_access
def cmd_allocate(message: types.Message):
    chat_id = message.chat.id
    state = user_states.setdefault(chat_id, UserState())

    # —Å–∫–∏–Ω–µ–º–æ –ø—Ä–æ–º—ñ–∂–Ω–∏–π —Å—Ç–∞–Ω –∞–ª–æ–∫–∞—Ü—ñ—ó
    state.alloc_df = None
    state.alloc_budget = None
    state.alloc_mode = None
    state.phase = "WAIT_ALLOC_MODE"

    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üîπ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞ (–ª–æ–∫–∞–ª—å–Ω–∞)", callback_data="alloc_mode:optimal"),
        types.InlineKeyboardButton("üîπ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ (–ª–æ–∫–∞–ª—å–Ω–∞ –±–µ–∑ –±—é–¥–∂–µ—Ç—É)", callback_data="alloc_mode:alternative"),
    )
    kb.add(
        types.InlineKeyboardButton("ü§ñ OpenAI (–±–µ–∑ –±—é–¥–∂–µ—Ç—É)", callback_data="alloc_mode:openai"),
    )

    bot.reply_to(
        message,
        "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –∞–ª–æ–∫–∞—Ü—ñ—ó:",
        reply_markup=kb
    )


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("alloc_mode:"))
@require_access_cb
def on_alloc_mode(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    state = user_states.setdefault(chat_id, UserState())
    mode = call.data.split(":", 1)[1]

    if mode not in {"optimal", "alternative", "openai"}:
        bot.answer_callback_query(call.id, "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–∂–∏–º.")
        return

    state.alloc_mode = mode
    # –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É –ø—Ä–æ—Å–∏–º–æ result.xlsx (–¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä–µ–∂–∏–º—É)
    state.phase = "WAIT_ALLOC_RESULT"
    bot.answer_callback_query(call.id, "–†–µ–∂–∏–º –æ–±—Ä–∞–Ω–æ.")
    bot.send_message(
        chat_id,
        (
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª <b>result.xlsx</b> (—Ç–æ–π, —â–æ –±–æ—Ç –∑–≥–µ–Ω–µ—Ä—É–≤–∞–≤ —Ä–∞–Ω—ñ—à–µ).\n\n"
            "‚Ä¢ –£ —Ä–µ–∂–∏–º—ñ <b>OpenAI</b> –±—é–¥–∂–µ—Ç –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω ‚Äî –æ–±—Ä–æ–±–ª—é –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—É.\n"
            "‚Ä¢ –£ –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ä–µ–∂–∏–º–∞—Ö –ø–æ–ø—Ä–æ—à—É –±—é–¥–∂–µ—Ç –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É."
        ),
        parse_mode="HTML"
    )


@bot.message_handler(content_types=["text"], func=lambda m: not (m.text or "").startswith("/"))
@require_access
def on_text(message: types.Message):
    chat_id = message.chat.id
    state = user_states.setdefault(chat_id, UserState())

    # –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —É —Ñ–∞–∑—ñ –∞–ª–æ–∫–∞—Ü—ñ—ó
    if state.phase != "WAIT_ALLOC_BUDGET":
        return

    # ===== –õ–æ–∫–∞–ª—å–Ω—ñ —Ä–µ–∂–∏–º–∏: –Ω–∏–∂—á–µ –≤—Å–µ —è–∫ –±—É–ª–æ (–ø–æ—Ç—Ä—ñ–±–µ–Ω –±—é–¥–∂–µ—Ç) =====
    # Parse budget
    txt = (message.text or "").strip().replace(",", ".")
    try:
        budget = float(txt)
        if budget < 0:
            raise ValueError("negative")
    except Exception:
        bot.reply_to(message, "–í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–µ–∫—Ç–Ω–µ –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 200).")
        return

    if state.alloc_df is None or len(state.alloc_df) == 0:
        bot.reply_to(message, "–ù–µ–º–∞—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ Result. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /allocate —â–µ —Ä–∞–∑.")
        state.phase = "WAIT_MAIN"
        return

    # –õ–æ–∫–∞–ª—å–Ω–∞ –∞–ª–æ–∫–∞—Ü—ñ—è
    alloc_df, summary, alloc_vec = compute_optimal_allocation(state.alloc_df, budget)

    # –§–æ—Ä–º—É—î–º–æ —Ñ–∞–π–ª —ñ–∑ –Ω–æ–≤–∏–º–∏ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏
    bio = io.BytesIO()
    write_result_like_excel_with_new_spend(bio, state.alloc_df, new_total_spend=alloc_vec)

    bio.seek(0)
    bot.send_document(
        chat_id,
        bio,
        visible_file_name="allocation.xlsx",
        caption=summary  # –∫–æ—Ä–æ—Ç–∫–∏–π –ø—ñ–¥—Å—É–º–æ–∫
    )

    # –î–µ—Ç–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è
    explanation = build_allocation_explanation(state.alloc_df, alloc_vec, budget, max_lines=20)
    bot.send_message(chat_id, explanation)

    state.phase = "WAIT_MAIN"


@bot.callback_query_handler(func=lambda c: c.data == "skip_offer")
@require_access_cb
def on_skip_offer(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    state = user_states.setdefault(chat_id, UserState())

    # –Ø–∫—â–æ –≤–∂–µ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
    if state.current_offer_index >= len(state.offers):
        bot.answer_callback_query(call.id, "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ñ–µ—Ä—É.")
        return

    offer = state.offers[state.current_offer_index]

    # –í–ê–ñ–õ–ò–í–û: –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫—É ‚Äî –ù–ï –¥–æ–¥–∞—î–º–æ —Ü–µ–π –æ—Ñ–µ—Ä —É —Ä–µ–∑—É–ª—å—Ç–∞—Ç,
    # —Ç–æ–∂ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –π–æ–≥–æ –∑ –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä (—è–∫—â–æ —Ç–∏ –∑–±–µ—Ä—ñ–≥–∞—î—à –∞–≥—Ä–µ–≥–∞—Ç–∏)
    if hasattr(state, "main_agg_df") and state.main_agg_df is not None:
        # –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–±–∏—Ä–∞—î–º–æ —Ä—è–¥–∫–∏ —Ü—å–æ–≥–æ –æ—Ñ–µ—Ä—É, —â–æ–± –Ω–µ –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ —É —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π Excel
        state.main_agg_df = state.main_agg_df[state.main_agg_df["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"] != offer]

    # –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ—Ñ–µ—Ä—É
    state.current_offer_index += 1
    bot.answer_callback_query(call.id, "–û—Ñ–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω–æ.")

    # —è–∫—â–æ —â–µ —î –æ—Ñ–µ—Ä–∏ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –¥–æ–¥–∞—Ç–∫–æ–≤—É —Ç–∞–±–ª–∏—Ü—é
    if state.current_offer_index < len(state.offers):
        ask_additional_table_with_skip(call.message, state)
    else:
        # —è–∫—â–æ –æ—Ñ–µ—Ä—ñ–≤ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î ‚Äî –≥–µ–Ω–µ—Ä—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
        try:
            final_df = build_final_output(state)
            send_final_table(call.message, final_df)
        except Exception as e:
            bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É: <code>{e}</code>")


@bot.message_handler(commands=["whoami"])
def whoami(message: types.Message):
    bot.reply_to(message, f"–í–∞—à Telegram ID: <code>{message.from_user.id}</code>")


# ===================== MAIN TABLE LOGIC =====================

def handle_main_table(message: types.Message, state: UserState, df: pd.DataFrame):
    # Clean & coerce
    work = df.copy()
    work["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"] = work["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"].astype(str).str.strip()
    work["–ì–ï–û"] = work["–ì–ï–û"].astype(str).str.strip()
    work["–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏"] = pd.to_numeric(work["–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏"], errors="coerce").fillna(0.0)

    # Drop empty/placeholder Offer IDs - handle string values properly
    work = work[
        work["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"].ne("") &
        work["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"].ne("nan") &
        work["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"].ne("None") &
        work["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"].notna()
        ]

    # Also filter out rows where –ì–ï–û is empty
    work = work[
        work["–ì–ï–û"].ne("") &
        work["–ì–ï–û"].ne("nan") &
        work["–ì–ï–û"].ne("None") &
        work["–ì–ï–û"].notna()
        ]

    if len(work) == 0:
        bot.reply_to(message, "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ —É BUDG —Ç–∞–±–ª–∏—Ü—ñ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è.")
        return

    # Aggregate by Offer ID + GEO
    agg = (
        work.groupby(["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É", "–ì–ï–û"])["–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏"]
        .sum().reset_index()
    )

    state.main_agg_df = agg

    # Unique Offer IDs (from cleaned data)
    state.offers = sorted(agg["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"].unique().tolist())
    state.phase = "WAIT_ADDITIONAL"
    state.current_offer_index = 0
    ask_additional_table_with_skip(message, state)

    if not state.offers:
        bot.reply_to(message, "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ Offer ID —É –∞—Ä–∫—É—à—ñ BUDG –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è.")
        return


# ===================== ADDITIONAL TABLE LOGIC =====================

def handle_additional_table(message: types.Message, state: UserState, df: pd.DataFrame):
    # 1) Clean & normalize
    work = df.copy()
    work["–ö—Ä–∞—ó–Ω–∞"] = work["–ö—Ä–∞—ó–Ω–∞"].astype(str).str.strip()
    work["–°—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤"] = pd.to_numeric(work["–°—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤"], errors="coerce").fillna(0.0)

    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ/–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫—Ä–∞—ó–Ω–∏
    work = work[
        work["–ö—Ä–∞—ó–Ω–∞"].ne("") &
        work["–ö—Ä–∞—ó–Ω–∞"].ne("nan") &
        work["–ö—Ä–∞—ó–Ω–∞"].ne("None") &
        work["–ö—Ä–∞—ó–Ω–∞"].notna()
        ]

    # 2) –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –æ—Ñ–µ—Ä
    try:
        current_offer = state.offers[state.current_offer_index]
    except IndexError:
        bot.reply_to(message, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ Offer ID. –ù–∞–ø–∏—à–∏ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
        return

    # 3) –Ø–∫—â–æ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–∞–≤–ª—è—î–º–æ –Ω—É–ª—ñ
    if len(work) == 0:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ¬´–Ω—É–ª—å–æ–≤—ñ¬ª –¥–µ–ø–æ–∑–∏—Ç–∏ –¥–ª—è –ª–æ–≥—ñ–∫–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ—Ä–¥–∂—É
        # (–ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ª–æ–≤–Ω–∏–∫ –æ–∑–Ω–∞—á–∞—î, —â–æ –ø–æ –∫—Ä–∞—ó–Ω–∞—Ö –Ω—ñ—á–æ–≥–æ –Ω–µ –¥–æ–¥–∞–≤–∞—Ç–∏;
        # –Ω–∏–∂—á–µ —â–µ –π –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –Ω—É–ª—ñ —É –ø—Ä–æ–º—ñ–∂–Ω—ñ–π —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –≤–æ–Ω–∞ –≤–∂–µ —î)
        state.offer_deposits[current_offer] = {}

        # –Ø–∫—â–æ –≤ –ø–∞–º‚Äô—è—Ç—ñ –≤–∂–µ —î –∞–≥—Ä–µ–≥–æ–≤–∞–Ω–∞ –≥–æ–ª–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è ‚Äî –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –Ω—É–ª—ñ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ—Ñ–µ—Ä—É
        if hasattr(state, "main_agg_df") and state.main_agg_df is not None:
            mask = state.main_agg_df["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"] == current_offer
            # —Å—Ç–≤–æ—Ä–∏–º–æ –∫–æ–ª–æ–Ω–∫–∏, —è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î
            if "Total Dep Sum" not in state.main_agg_df.columns:
                state.main_agg_df["Total Dep Sum"] = 0.0
            if "Total Dep Amount" not in state.main_agg_df.columns:
                state.main_agg_df["Total Dep Amount"] = 0
            # –Ω—É–ª—ñ –¥–ª—è –≤—Å—ñ—Ö —Ä—è–¥–∫—ñ–≤ —Ü—å–æ–≥–æ –æ—Ñ–µ—Ä—É
            state.main_agg_df.loc[mask, "Total Dep Sum"] = 0.0
            state.main_agg_df.loc[mask, "Total Dep Amount"] = 0

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        bot.reply_to(
            message,
            (
                f"‚ÑπÔ∏è –£ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ–π —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è <b>{current_offer}</b> –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è.\n"
                f"–î–ª—è —Ü—å–æ–≥–æ –æ—Ñ–µ—Ä—É –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ <b>0</b> —É –∫–æ–ª–æ–Ω–∫–∞—Ö –¥–µ–ø–æ–∑–∏—Ç—ñ–≤."
            ),
        )

        # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ—Ñ–µ—Ä—É / —Ñ—ñ–Ω–∞–ª
        state.current_offer_index += 1
        if state.current_offer_index >= len(state.offers):
            final_df = build_final_output(state)
            send_final_table(message, final_df)
            user_states[message.chat.id] = UserState()  # reset
            return

        next_offer = state.offers[state.current_offer_index]
        bot.reply_to(
            message,
            (
                f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –¥–ª—è <b>{next_offer}</b> "
                f"({state.current_offer_index + 1}/{len(state.offers)})."
            ),
        )
        return

    # 4) –Ø–∫—â–æ –¥–∞–Ω—ñ —î ‚Äî –∫–∞–Ω–æ–Ω—ñ–∫–∞–ª—ñ–∑—É—î–º–æ –∫—Ä–∞—ó–Ω–∏ —Ç–∞ –∞–≥—Ä–µ–≥—É—î–º–æ
    work["canon_en"] = work["–ö—Ä–∞—ó–Ω–∞"].apply(
        lambda x: to_canonical_en(x, state.country_map_uk_to_en, state.country_canon)
    )

    dep_by_country = (
        work.groupby("canon_en")["–°—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤"]
        .agg(["sum", "count"]).reset_index()
        .rename(columns={"sum": "total", "count": "count"})
    )

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–≥—Ä–µ–≥–∞—Ç–∏ –≤ –ø–∞–º'—è—Ç—å –¥–ª—è —Ü—å–æ–≥–æ –æ—Ñ–µ—Ä—É
    state.offer_deposits[current_offer] = {
        row["canon_en"]: {"total": float(row["total"]), "count": int(row["count"])}
        for _, row in dep_by_country.iterrows()
    }

    # 5) –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —ñ–Ω—Ñ–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    countries_found = list(dep_by_country["canon_en"].unique())
    total_deposits = float(dep_by_country["total"].sum())

    # 6) –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ—Ñ–µ—Ä—É / —Ñ—ñ–Ω–∞–ª
    state.current_offer_index += 1
    if state.current_offer_index >= len(state.offers):
        final_df = build_final_output(state)
        send_final_table(message, final_df)
        user_states[message.chat.id] = UserState()  # reset
        return

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ–π –æ—Ñ–µ—Ä", callback_data="skip_offer"))

    next_offer = state.offers[state.current_offer_index]
    summary = f"""
‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ –¥–∞–Ω—ñ –¥–ª—è <b>{current_offer}</b>
üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(countries_found)} –∫—Ä–∞—ó–Ω, –∑–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤: {total_deposits:,.2f}

–ö—Ä–∞—ó–Ω–∏: {', '.join(countries_found[:5])}{' ...' if len(countries_found) > 5 else ''}

–ù–∞–¥—ñ—à–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –¥–æ–¥–∞—Ç–∫–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –¥–ª—è <b>{next_offer}</b> ({state.current_offer_index + 1}/{len(state.offers)})
    """.strip()

    bot.send_message(message.from_user.id, summary, reply_markup=kb)


# ===================== BUILD FINAL =====================

def geo_to_canonical(geo: str, uk_to_en: Dict[str, str], canonical: Dict[str, str]) -> str:
    return to_canonical_en(geo, uk_to_en, canonical)


def build_final_output(state: UserState) -> pd.DataFrame:
    agg = state.main_agg_df.copy()
    # Canonical GEO for matching
    agg["–ì–ï–û_canon"] = agg["–ì–ï–û"].apply(lambda g: geo_to_canonical(g, state.country_map_uk_to_en, state.country_canon))

    rows: List[Dict[str, object]] = []
    for _, row in agg.iterrows():
        offer_name = str(row["–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É"])
        # If you have a real Offer ID elsewhere ‚Äî put it here. Fallback to offer_name.
        offer_id = offer_name

        geo_display = str(row["–ì–ï–û"])
        geo_canon = str(row["–ì–ï–û_canon"])
        spend_total = float(row["–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏"])

        dep_sum = 0.0  # Total Dep Sum ($)
        dep_cnt = 0  # FTD qty
        offer_map = state.offer_deposits.get(offer_name, {})
        if geo_canon in offer_map:
            dep_sum = float(offer_map[geo_canon]["total"])
            dep_cnt = int(offer_map[geo_canon]["count"])
        else:
            import difflib
            candidates = list(offer_map.keys())
            close = difflib.get_close_matches(geo_canon, candidates, n=1, cutoff=0.6)
            if close:
                dep_sum = float(offer_map[close[0]]["total"])
                dep_cnt = int(offer_map[close[0]]["count"])

        rows.append({
            "Subid": "",  # empty
            "Offer ID": offer_id,  # from main table (fallback = name)
            "–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É": offer_name,  # Offer Name
            "–ì–ï–û": geo_display,  # Country
            "FTD qty": dep_cnt,  # count
            "Total Spend": spend_total,  # $
            "Total Dep Amount": dep_sum,  # $ (your naming; this is the sum)
            # rest computed later in Excel
        })

    # Order primary columns; computed ones will be added in send_final_table
    df = pd.DataFrame(rows, columns=[
        "Subid", "Offer ID", "–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É", "–ì–ï–û", "FTD qty", "Total Spend", "Total Dep Amount"
    ])
    return df


# ===================== SENDER =====================

def send_final_table(message: types.Message, df: pd.DataFrame):
    bio = io.BytesIO()
    with pd.ExcelWriter(bio, engine="openpyxl") as writer:
        # Rebuild to requested order
        base_cols = [
            "Subid", "Offer ID", "–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É", "–ì–ï–û",
            "FTD qty", "Total Spend", "Total Dep Amount"
        ]
        df = df[base_cols].copy()

        # ---- NEW: round numeric inputs before write ----
        df["Total Spend"] = pd.to_numeric(df["Total Spend"], errors="coerce").round(2)
        df["Total Dep Amount"] = pd.to_numeric(df["Total Dep Amount"], errors="coerce").round(2)
        df["FTD qty"] = pd.to_numeric(df["FTD qty"], errors="coerce").fillna(0).astype(int)
        # -------------------------------------------------

        final_cols = [
            "Subid", "Offer ID", "–ù–∞–∑–≤–∞ –û—Ñ—Ñ–µ—Ä—É", "–ì–ï–û",
            "FTD qty", "Total spend", "Total+%", "CPA", "CPA Target", "–°P/–ß",
            "Total Dep Amount", "My deposit amount", "C. profit Target 40%", "C. profit Target 50%",
            "CAP", "–û—Å—Ç–∞—Ç–æ–∫ CAP"
        ]

        df.rename(columns={"Total Spend": "Total spend"}, inplace=True)

        # Placeholders
        df["Total+%"] = None
        df["CPA"] = None
        df["CPA Target"] = None
        df["–°P/–ß"] = None
        df["My deposit amount"] = None
        df["C. profit Target 40%"] = None
        df["C. profit Target 50%"] = None
        df["CAP"] = ""
        df["–û—Å—Ç–∞—Ç–æ–∫ CAP"] = ""

        df = df[final_cols]

        df.to_excel(writer, index=False, sheet_name="Result")

        wb = writer.book
        ws = writer.sheets["Result"]

        from openpyxl.styles import PatternFill, Alignment, Font
        from openpyxl.formatting.rule import FormulaRule

        first_row = 2
        last_row = ws.max_row

        # Formulas (letters for new layout)
        for r in range(first_row, last_row + 1):
            ws[f"G{r}"].value = f"=F{r}*1.3"  # Total+%
            ws[f"H{r}"].value = f"=IFERROR(G{r}/E{r},\"\")"  # CPA
            ws[f"I{r}"].value = cpa_target_for_geo(ws[f"D{r}"].value)  # CPA Target
            ws[f"J{r}"].value = f"=IFERROR(K{r}/E{r},\"\")"  # –°P/–ß
            ws[f"L{r}"].value = f"=IFERROR(K{r}/G{r}*100,0)"  # My deposit amount
            ws[f"M{r}"].value = f"=G{r}*0.4"  # Profit 40%
            ws[f"N{r}"].value = f"=G{r}*0.5"  # Profit 50%

        # ---- NEW: number formats to 2 decimals everywhere needed ----
        # Integers: E (FTD qty)
        for r in range(first_row, last_row + 1):
            ws[f"E{r}"].number_format = "0"

        # Two decimals: F..N except I (integer target), but leave I as integer 8
        two_dec_cols = ["F", "G", "H", "J", "K", "L", "M", "N"]
        for col in two_dec_cols:
            for r in range(first_row, last_row + 1):
                ws[f"{col}{r}"].number_format = "0.00"

        # –Ø–∫—â–æ —Ö–æ—á–µ—à –¥–≤—ñ –∫–æ–º–∏ —Å–∞–º–µ –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –∑ –∫–æ–º–æ—é —è–∫ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–µ–º,
        # Excel –ø—ñ–¥—Ö–æ–ø–∏—Ç—å –ª–æ–∫–∞–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ; —à–∞–±–ª–æ–Ω "0.00" –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç—å—Å—è –∑ –∫–æ–º–æ—é —É UA-–ª–æ–∫–∞–ª—ñ.
        # --------------------------------------------------------------

        # Header styling
        for col in range(1, 17):  # A..P
            ws.cell(row=1, column=col).font = Font(bold=True)
            ws.cell(row=1, column=col).alignment = Alignment(horizontal="center")

        widths = {
            "A": 10, "B": 12, "C": 22, "D": 16, "E": 10, "F": 14, "G": 12, "H": 10, "I": 12,
            "J": 10, "K": 16, "L": 18, "M": 18, "N": 18, "O": 12, "P": 16
        }
        for col, w in widths.items():
            ws.column_dimensions[col].width = w

        # Conditional formatting (unchanged logic, new letters)
        data_range = f"A{first_row}:P{last_row}"
        grey = PatternFill("solid", fgColor="BFBFBF")
        green = PatternFill("solid", fgColor="C6EFCE")
        yellow = PatternFill("solid", fgColor="FFEB9C")
        red = PatternFill("solid", fgColor="FFC7CE")

        # Grey: E = 0
        ws.conditional_formatting.add(
            data_range,
            FormulaRule(formula=["$E2=0"], fill=grey, stopIfTrue=True)
        )

        # Green: INT(H) <= INT(I) AND L > 39
        ws.conditional_formatting.add(
            data_range,
            FormulaRule(formula=["AND($E2>0,INT($H2)<=INT($I2),$L2>39)"], fill=green, stopIfTrue=True)
        )

        # Yellow: (INT(H) <= INT(I)) OR (L > 39 AND H < I*1.31)
        ws.conditional_formatting.add(
            data_range,
            FormulaRule(formula=["AND($E2>0,OR(INT($H2)<=INT($I2),AND($L2>39,$H2<$I2*1.31)))"], fill=yellow,
                        stopIfTrue=True)
        )

        # Red: (E > 0 AND H > I*1.3 AND L > 39) OR (E > 0 AND INT(H) > INT(I) AND L < 39)
        ws.conditional_formatting.add(
            data_range,
            FormulaRule(
                formula=["OR(AND($E2>0,$H2>$I2*1.3,$L2>39),AND($E2>0,INT($H2)>INT($I2),$L2<39))"],
                fill=red,
                stopIfTrue=True
            )
        )

    bio.seek(0)
    bot.send_document(
        message.chat.id,
        bio,
        visible_file_name="result.xlsx",
        caption="–§—ñ–Ω–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è (2 –∑–Ω–∞–∫–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏, –Ω–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫)"
    )


# ===================== MAIN =====================
if __name__ == "__main__":
    print("Bot is running...")
    bot.infinity_polling(skip_pending=True)
